# Structure de l'application Shiny
ui <- fluidPage(
# Titre de l'application
titlePanel("Transports en Occitanie - Application Shiny"),
# Disposition en deux colonnes
sidebarLayout(
# Panneau latéral pour les contrôles Shiny
sidebarPanel(
h3("Contrôles Shiny"),
p("Cette section peut contenir des contrôles Shiny supplémentaires qui interagissent avec la carte."),
# Exemple de contrôles (vous pouvez les modifier selon vos besoins)
selectInput("view_type", "Type d'affichage:",
choices = c("Carte complète" = "full",
"Seulement la recherche" = "search_only"),
selected = "full"),
# Bouton pour ouvrir la carte dans une nouvelle fenêtre
actionButton("open_map", "Ouvrir la carte dans une nouvelle fenêtre",
onclick = "window.open('index.html', '_blank');"),
width = 3
),
# Panneau principal pour afficher la carte
mainPanel(
# Afficher la carte dans un iframe
tags$iframe(
id = "map_frame",
src = "index.html",
width = "100%",
height = "700px",
frameborder = "0",
style = "border: none; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);"
),
# Observer pour modifier l'affichage de l'iframe en fonction des contrôles
tags$script(HTML("
$(document).ready(function() {
$('#view_type').on('change', function() {
var iframe = document.getElementById('map_frame');
if (this.value === 'search_only') {
iframe.src = 'index.html?mode=search_only';
} else {
iframe.src = 'index.html';
}
});
});
")),
width = 9
)
),
# Pied de page
tags$div(
style = "margin-top: 20px; text-align: center; color: #666; font-size: 12px;",
"Application développée avec R Shiny intégrant une carte Google Maps pour les transports en Occitanie."
)
)
# Structure de l'application Shiny
# Le reste de votre code...
# Structure de l'application Shiny
ui <- fluidPage(
# Titre de l'application
titlePanel("Transports en Occitanie - Application Shiny"),
# Disposition en deux colonnes
sidebarLayout(
# Panneau latéral pour les contrôles Shiny
sidebarPanel(
h3("Contrôles Shiny"),
p("Cette section peut contenir des contrôles Shiny supplémentaires qui interagissent avec la carte."),
# Exemple de contrôles (vous pouvez les modifier selon vos besoins)
selectInput("view_type", "Type d'affichage:",
choices = c("Carte complète" = "full",
"Seulement la recherche" = "search_only"),
selected = "full"),
# Bouton pour ouvrir la carte dans une nouvelle fenêtre
actionButton("open_map", "Ouvrir la carte dans une nouvelle fenêtre",
onclick = "window.open('index.html', '_blank');"),
width = 3
),
# Panneau principal pour afficher la carte
mainPanel(
# Afficher la carte dans un iframe
tags$iframe(
id = "map_frame",
src = "index.html",
width = "100%",
height = "700px",
frameborder = "0",
style = "border: none; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);"
),
# Observer pour modifier l'affichage de l'iframe en fonction des contrôles
tags$script(HTML("
$(document).ready(function() {
$('#view_type').on('change', function() {
var iframe = document.getElementById('map_frame');
if (this.value === 'search_only') {
iframe.src = 'index.html?mode=search_only';
} else {
iframe.src = 'index.html';
}
});
});
")),
width = 9
)
),
# Pied de page
tags$div(
style = "margin-top: 20px; text-align: center; color: #666; font-size: 12px;",
"Application développée avec R Shiny intégrant une carte Google Maps pour les transports en Occitanie."
)
)
# Lancer l'application
shiny::shinyApp(ui, server)
# Structure de l'application Shiny
ui <- shiny::fluidPage(
# Titre de l'application
shiny::titlePanel("Transports en Occitanie - Application Shiny"),
# Disposition en deux colonnes
shiny::sidebarLayout(
# Panneau latéral pour les contrôles Shiny
shiny::sidebarPanel(
shiny::h3("Contrôles Shiny"),
shiny::p("Cette section peut contenir des contrôles Shiny supplémentaires qui interagissent avec la carte."),
# Exemple de contrôles (vous pouvez les modifier selon vos besoins)
shiny::selectInput("view_type", "Type d'affichage:",
choices = c("Carte complète" = "full",
"Seulement la recherche" = "search_only"),
selected = "full"),
# Bouton pour ouvrir la carte dans une nouvelle fenêtre
shiny::actionButton("open_map", "Ouvrir la carte dans une nouvelle fenêtre",
onclick = "window.open('index.html', '_blank');"),
width = 3
),
# Panneau principal pour afficher la carte
shiny::mainPanel(
# Afficher la carte dans un iframe
shiny::tags$iframe(
id = "map_frame",
src = "index.html",
width = "100%",
height = "700px",
frameborder = "0",
style = "border: none; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);"
),
# Observer pour modifier l'affichage de l'iframe en fonction des contrôles
shiny::tags$script(shiny::HTML("
$(document).ready(function() {
$('#view_type').on('change', function() {
var iframe = document.getElementById('map_frame');
if (this.value === 'search_only') {
iframe.src = 'index.html?mode=search_only';
} else {
iframe.src = 'index.html';
}
});
});
")),
width = 9
)
),
# Pied de page
shiny::tags$div(
style = "margin-top: 20px; text-align: center; color: #666; font-size: 12px;",
"Application développée avec R Shiny intégrant une carte Google Maps pour les transports en Occitanie."
)
)
# Logique du serveur
server <- function(input, output, session) {
# Vous pouvez ajouter ici la logique pour interagir avec la carte
}
# Lancer l'application
shiny::shinyApp(ui, server)
# Structure de l'application Shiny
ui <- shiny::fluidPage(
# Titre de l'application
shiny::titlePanel("Transports en Occitanie - Application Shiny"),
# Disposition en deux colonnes
shiny::sidebarLayout(
# Panneau latéral pour les contrôles Shiny
shiny::sidebarPanel(
shiny::h3("Contrôles Shiny"),
shiny::p("Cette section peut contenir des contrôles Shiny supplémentaires qui interagissent avec la carte."),
# Exemple de contrôles (vous pouvez les modifier selon vos besoins)
shiny::selectInput("view_type", "Type d'affichage:",
choices = c("Carte complète" = "full",
"Seulement la recherche" = "search_only"),
selected = "full"),
# Bouton pour ouvrir la carte dans une nouvelle fenêtre
shiny::actionButton("open_map", "Ouvrir la carte dans une nouvelle fenêtre",
onclick = "window.open('index.html', '_blank');"),
width = 3
),
# Panneau principal pour afficher la carte
shiny::mainPanel(
# Afficher la carte dans un iframe
shiny::tags$iframe(
id = "map_frame",
src = "index.html",
width = "100%",
height = "700px",
frameborder = "0",
style = "border: none; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);"
),
# Observer pour modifier l'affichage de l'iframe en fonction des contrôles
shiny::tags$script(shiny::HTML("
$(document).ready(function() {
$('#view_type').on('change', function() {
var iframe = document.getElementById('map_frame');
if (this.value === 'search_only') {
iframe.src = 'index.html?mode=search_only';
} else {
iframe.src = 'index.html';
}
});
});
")),
width = 9
)
),
# Pied de page
shiny::tags$div(
style = "margin-top: 20px; text-align: center; color: #666; font-size: 12px;",
"Application développée avec R Shiny intégrant une carte Google Maps pour les transports en Occitanie."
)
)
# Logique du serveur
server <- function(input, output, session) {
# Vous pouvez ajouter ici la logique pour interagir avec la carte
}
# Lancer l'application
shiny::shinyApp(ui, server)
# Installer et charger les packages nécessaires
if (!require("shiny")) {
install.packages("shiny")
}
library(shiny)
# Interface utilisateur
ui <- fluidPage(
# Titre de l'application
titlePanel("Transports en Occitanie"),
# Disposition en deux colonnes
sidebarLayout(
# Panneau latéral pour les contrôles Shiny
sidebarPanel(
h3("Contrôles"),
# Sélection des villes de départ
selectInput("origin_city", "Ville de départ:",
choices = c("Sélectionnez une ville" = "",
"Montpellier", "Toulouse", "Nîmes", "Perpignan",
"Béziers", "Albi", "Narbonne", "Tarbes", "Sète",
"Carcassonne", "Rodez", "Castres", "Alès", "Montauban"),
selected = ""),
# Sélection des villes de destination
selectInput("destination_city", "Ville de destination:",
choices = c("Sélectionnez une ville" = "",
"Montpellier", "Toulouse", "Nîmes", "Perpignan",
"Béziers", "Albi", "Narbonne", "Tarbes", "Sète",
"Carcassonne", "Rodez", "Castres", "Alès", "Montauban"),
selected = ""),
# Bouton pour rechercher l'itinéraire
actionButton("find_route", "Rechercher l'itinéraire",
class = "btn-primary",
style = "width: 100%; margin-top: 10px;"),
# Bouton pour réinitialiser la carte
actionButton("reset_map", "Réinitialiser la carte",
class = "btn-secondary",
style = "width: 100%; margin-top: 10px;"),
# Informations sur l'application
tags$hr(),
tags$p("Cette application utilise Google Maps pour afficher les itinéraires en transport en commun entre les principales villes d'Occitanie."),
tags$p("Sélectionnez une ville de départ et une destination, puis cliquez sur 'Rechercher l'itinéraire'."),
width = 3
),
# Panneau principal pour afficher la carte
mainPanel(
# Afficher la carte dans un iframe
tags$iframe(
id = "map_frame",
src = "index.html",
width = "100%",
height = "700px",
frameborder = "0",
style = "border: none; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);"
),
width = 9
)
)
)
# Serveur
server <- function(input, output, session) {
# Observer pour le bouton de recherche d'itinéraire
observeEvent(input$find_route, {
# Vérifier que les deux villes sont sélectionnées
if (input$origin_city != "" && input$destination_city != "") {
# Construire l'URL avec les paramètres
iframe_url <- paste0(
"index.html?origin=", URLencode(input$origin_city),
"&destination=", URLencode(input$destination_city)
)
# Mettre à jour l'iframe
session$sendCustomMessage(
type = "updateIframeSrc",
message = list(id = "map_frame", src = iframe_url)
)
} else {
# Afficher une alerte si les villes ne sont pas sélectionnées
showNotification(
"Veuillez sélectionner une ville de départ et une destination.",
type = "warning"
)
}
})
# Observer pour le bouton de réinitialisation
observeEvent(input$reset_map, {
# Réinitialiser l'iframe à la page d'origine
session$sendCustomMessage(
type = "updateIframeSrc",
message = list(id = "map_frame", src = "index.html")
)
# Réinitialiser les sélections
updateSelectInput(session, "origin_city", selected = "")
updateSelectInput(session, "destination_city", selected = "")
})
}
# JavaScript pour mettre à jour l'iframe
js <- "
Shiny.addCustomMessageHandler('updateIframeSrc', function(message) {
document.getElementById(message.id).src = message.src;
});
"
# Application complète
shinyApp(
ui = tagList(
ui,
tags$script(HTML(js))
),
server = server
)
library(shiny)
# Interface utilisateur simplifiée
ui <- fluidPage(
titlePanel("Transports en Occitanie"),
# Afficher simplement la carte dans un iframe
tags$iframe(
id = "map_frame",
src = "index.html",
width = "100%",
height = "800px",
frameborder = "0",
style = "border: none;"
)
)
# Serveur minimal
server <- function(input, output, session) {
# Aucune logique serveur nécessaire pour cette version simplifiée
}
# Lancer l'application
shinyApp(ui, server)
# Afficher le répertoire de travail et les fichiers
cat("Répertoire de travail:", getwd(), "\n")
cat("Fichiers dans le répertoire actuel:", paste(dir(), collapse=", "), "\n")
if (dir.exists("www")) {
cat("Fichiers dans le dossier www:", paste(dir("www"), collapse=", "), "\n")
} else {
cat("Le dossier www n'existe pas!\n")
# Créer le dossier www s'il n'existe pas
dir.create("www")
}
library(shiny)
library(httpuv)
# Créer un serveur HTTP pour servir les fichiers statiques
app_dir <- getwd()
www_dir <- file.path(app_dir, "www")
# Interface utilisateur
ui <- fluidPage(
titlePanel("Transports en Occitanie"),
# Utiliser une URL complète pour l'iframe
tags$iframe(
id = "map_frame",
src = paste0("http://localhost:8080/index.html"),
width = "100%",
height = "800px",
frameborder = "0",
style = "border: none;"
)
)
# Serveur
server <- function(input, output, session) {
# Démarrer un serveur HTTP pour servir les fichiers statiques
httpuv_server <- NULL
# Démarrer le serveur au lancement de l'application
onSessionStart <- function() {
httpuv_server <<- startServer(
host = "localhost",
port = 8080,
app = list(
call = function(req) {
# Déterminer le chemin du fichier demandé
path <- req$PATH_INFO
if (path == "/") path <- "/index.html"
# Construire le chemin complet
file_path <- file.path(www_dir, sub("^/", "", path))
# Vérifier si le fichier existe
if (!file.exists(file_path)) {
return(list(
status = 404,
headers = list("Content-Type" = "text/plain"),
body = "File not found"
))
}
# Déterminer le type MIME
content_type <- switch(
abilities::file_ext(file_path),
html = "text/html",
js = "application/javascript",
css = "text/css",
"application/octet-stream"
)
# Lire et renvoyer le fichier
list(
status = 200,
headers = list("Content-Type" = content_type),
body = readBin(file_path, "raw", file.info(file_path)$size)
)
}
)
)
}
# Arrêter le serveur à la fermeture de l'application
onSessionEnded(function() {
if (!is.null(httpuv_server)) {
httpuv_server$stop()
}
})
# Démarrer le serveur
onSessionStart()
}
# Lancer l'application
shinyApp(ui, server)
