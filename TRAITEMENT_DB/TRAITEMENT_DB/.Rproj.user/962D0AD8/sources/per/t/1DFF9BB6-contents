#### -- --- --- -- - PARTIE SERVER DU PROJET - -- - - - -- -- - -- - -- -- - -- - -- -- -- -- --- --- -

# Recommandation  : Lancer l'appli à partir de global.R
# Voir la feuille global.R  pour tous les commentaires (documentation sur le site) 

#### -- --- --- -- - -- - - - -  -- - - - - - --- - -- - - - -- -- - -- - -- -- - -- - -- -- -- -- --- --- -













#SERVEUR -------------------------------------------------------------------------------------------------------------------------------------- ####
server <- function(input, output, session) {
  
  
# ___________ _ _ ___________ __ _____  _ Sorties CARTO LEAFLET __________________ _ _ _ _____  ____________ _ _ _ _____  _
  
  


  
  
  shape_ter_adil_react <- reactive({
    req(input$epci)
    shape_ter_adil %>%
        filter(nom_epci == input$epci)
  

  })
  
  
  
  
  epci_coords_react <- reactive({
    req(input$epci)
    as.numeric(st_bbox(shape_ter_adil_react() %>%
                         filter(nom_epci == input$epci)%>%
                         st_geometry()%>%
                         st_bbox() ))
  })
  

  
  
  
  
  
output$map_adil <- renderLeaflet({
 
  leaflet(options = leafletOptions(minZoom = 9, maxZoom = 12)) %>%
    addProviderTiles("OpenStreetMap.Mapnik", group = "OpenStreetMap")%>%
    addProviderTiles("Stadia.Outdoors", group = "Stadia.Outdoors") %>%
    addProviderTiles("Stadia.OSMBright",group = "Stadia.OSMBright") %>%
    addProviderTiles("CartoDB.Positron", group = "CartoDB.Positron") %>%
    addProviderTiles("Jawg.Light",group = "Jawg.Light") %>%
    addProviderTiles("Thunderforest.Outdoors", group = "Thunderforest.Pioneer") %>%
    addLayersControl(
      baseGroups = c("OpenStreetMap", "Stadia.Outdoors","Stadia.OSMBright", "CartoDB.Positron","Jawg.Light", "Thunderforest.Pioneer"),
      options = layersControlOptions(collapsed = FALSE)
    )%>%
    
   
    addPolygons(
      group = "gard",
      data = shape_gard, stroke = T, opacity = 0.5, fillOpacity = 0.5, fillColor = "#ec6931",
      color = "#575756"
      
    )%>%
    addPolygons(data = shape_com,
                weight = 1.5,
                dashArray = "0",
                stroke = T,
                fill = T,

                opacity = 1,
                fillOpacity = 0,
                color = "grey",
             
    )%>%
    addPolygons(
      data = shape_epci, 
      stroke = TRUE, 
      opacity = 0.5, 
      fillOpacity = 0, 
      color = "#575756", 
      weight = 4, 
      label = ~nom_epci,  
      labelOptions = labelOptions(
        permanent = TRUE,      # Rend l'étiquette toujours visible
        direction = "center",  # Centre l'étiquette sur l'EPCI
        offset = c(10, 10),
        textOnly = TRUE,       # Affiche uniquement le texte (sans fond blanc)
        style = list(          # Personnalisation du texte
          "font-weight" = "bold",
          "color" = "black",
          "font-size" = "12px"
        )
      )
    )
  


  
})
  





  

observe({
  req(shape_ter_adil_react(),
      epci_coords_react())
  
  leafletProxy("map_adil") %>%
    clearGroup( c("epci_selection", "gard")) %>%  # Efface uniquement l'ancien territoire sélectionné
    addPolygons(
      data = shape_ter_adil_react(),
      stroke = TRUE, opacity = 0.5, fillOpacity = 0.5, color = "#ec6931"
      ,group = "epci_selection"  # Nommer le polygone pour le supp après une autre selection

    )   %>%
  # 
    addPolygons(data = shape_com,
                weight = "0.5",
                dashArray = "1",
                stroke = T,
                fill = T,

                # weight = 1,
                opacity = 1,
                fillOpacity = 0.5,
                color = "#ffffff00",

                label = ~NOM_COM_M,
                highlight = highlightOptions(
                  weight = 5,               # Augmente l'épaisseur du bord
                  color = "#666",           # Change la couleur de la bordure
                  dashArray = "",           # Supprime les tirets de la bordure
                  fillOpacity = 0.7,        # Modifie l'opacité de l'intérieur
                  bringToFront = TRUE       # Met en avant le polygone survolé
                )) %>%


    fitBounds(lng1 = epci_coords_react()[1], lat1 = epci_coords_react()[2], lng2 = epci_coords_react()[3], lat2 = epci_coords_react()[4])


})




  
  
  
  
  
  
  
  
  
  
  
  
  ##_ I. LES SORTIES DES GRAPHES  _________________####
  
  
  output$img_acc <- renderImage({
    # Chemin du fichier image
    list(
      src = "IMAGES/Feeries_Pont_du_gard.jpg", 
      contentType = "image/png",
      alt = "ferr",
       width = "100%",  # Modifier la largeur ici
       height = 900   # Modifier la hauteur ici
    )
  }, deleteFile = FALSE)
  
  
  
  
  output$logoP <- renderImage({
    # Chemin du fichier image
    list(src = "IMAGES/Logo_application_PNG.png",
         contentType = "image/png",
         contentType = "image/png",
         width = "auto",  # Redimensionner côté serveur
         height = 90)
  }, deleteFile = FALSE)
  
  
  
  
  
  
  
  output$logo2 <- renderImage({
    # Chemin du fichier image
    list(src = "IMAGES/Logo_ODH_ADIL30.png",
         contentType = "image/png",
         contentType = "image/png",
         width = "auto",  # Redimensionner côté serveur
         height = 70)
  }, deleteFile = FALSE)


  
  
  output$logo <- renderImage({
    # Chemin du fichier image
    list(src = "IMAGES/ADIL_du Gard_VERTICAL.jpg",
         contentType = "image/png",
         contentType = "image/png",
         width = 70,  # Redimensionner côté serveur
         height = 70)
  }, deleteFile = FALSE)
  
  
  
  
  
  
  

  
  
  
  
  
  
  
  ## Sortie de la box "chiffres de l'epci" pour l'onglet "population"
  
  output$image_epci <- renderImage({
    list(src = paste0("IMAGES/",input$epci , ".jpg"), width = "350px" ,contentType = 'image/jpg', alt = "Image 1")
    
    # list(src ="CC de Cèze Cévennes.jpg", width = "600px", contentType = 'image/jpg', alt = "Image 1")
    
  },deleteFile=FALSE)
  
  
  
    stat_POP_30_react <- reactive({
    req(input$epci)
    stat_POP_30%>%
      filter(LIBEPCI == input$epci)
  })
  
  output$population <- renderValueBox({

    valueBox(
      value = format(stat_POP_30_react()$NB_POP_ACTU, big.mark = " ", scientific = F),
      subtitle = tags$div("Population",style = "font-weight: bold;"),
      icon = tags$i(icon("people-group"),style = "font-size: 50px;"),
      color = "light-blue"
    )
  })
  
  
  
  
  
 
  tab_log_epci_react <- reactive({
    req(input$epci)
    tab_log_epci %>%
      filter(LIBEPCI == input$epci)
  })
  
  
  
   output$total_logements <- renderValueBox({
    valueBox(
      value = format(sum(tab_log_epci_react()$LOG), big.mark = " ", scientific = F), 
      subtitle =tags$div(
        "Logements",
        style = "font-weight: bold;"
      ),
      icon = tags$i(icon("house-chimney"),style = "font-size: 50px;"),
      color = "light-blue"
    )
  })
  
  
  
  
  
   output$RP_logements <- renderValueBox({
     valueBox(
       value = format(sum(tab_log_epci_react()$RP), big.mark = " ", scientific = F), 
       subtitle = tags$div( "Résidences principales",
                           style = "font-weight: bold;"),
       icon = tags$i( icon("house-flag"),style = "font-size: 50px;"),
       color = "light-blue"
     )
   })
   
   
   
   
   
   
   
   
   ## Sortie de la box "chiffres de l'epci" pour l'onglet "Démographie"
   
   
   
   output$image_epci <- renderImage({
     list(src = paste0("IMAGES/",input$epci , ".jpg"), width = "350px" ,contentType = 'image/jpg', alt = "Image 1")
     
     # list(src ="CC de Cèze Cévennes.jpg", width = "600px", contentType = 'image/jpg', alt = "Image 1")
     
   },deleteFile=FALSE)
   
   
   
   stat_POP_302_react <- reactive({
     req(input$epci)
     stat_POP_302%>%
       filter(LIBEPCI == input$epci)
   })
   
   output$population2 <- renderValueBox({
     
     valueBox(
       value = format(stat_POP_302_react()$NB_POP_ACTU, big.mark = " ", scientific = F),
       subtitle = tags$div("Population",style = "font-weight: bold;"),
       icon = tags$i(icon("people-group"),style = "font-size: 50px;"),
       color = "light-blue"
     )
   })
   
   
   
   tab_log_epci_react <- reactive({
     req(input$epci)
     tab_log_epci %>%
       filter(LIBEPCI == input$epci)
   })
   
   
   
   output$total_logements2 <- renderValueBox({
     valueBox(
       value = format(sum(tab_log_epci_react()$LOG), big.mark = " ", scientific = F), 
       subtitle =tags$div(
         "Logements",
         style = "font-weight: bold;"
       ),
       icon = tags$i(icon("house-chimney"),style = "font-size: 50px;"),
       color = "light-blue"
     )
   })
   
   
   
   
   
   output$RP_logements2 <- renderValueBox({
     valueBox(
       value = format(sum(tab_log_epci_react()$RP), big.mark = " ", scientific = F), 
       subtitle = tags$div( "Résidences principales",
                            style = "font-weight: bold;"),
       icon = tags$i( icon("house-flag"),style = "font-size: 50px;"),
       color = "light-blue"
     )
   })
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   ## Sortie de la box "chiffres de l'epci" pour l'onglet "Logements"
   
   
   
   output$image_epci <- renderImage({
     list(src = paste0("IMAGES/",input$epci , ".jpg"), width = "350px" ,contentType = 'image/jpg', alt = "Image 1")
     
     # list(src ="CC de Cèze Cévennes.jpg", width = "600px", contentType = 'image/jpg', alt = "Image 1")
     
   },deleteFile=FALSE)
   
   
   
   stat_POP_303_react <- reactive({
     req(input$epci)
     stat_POP_303%>%
       filter(LIBEPCI == input$epci)
   })
   
   output$population3 <- renderValueBox({
     
     valueBox(
       value = format(stat_POP_303_react()$NB_POP_ACTU, big.mark = " ", scientific = F),
       subtitle = tags$div("Population",style = "font-weight: bold;"),
       icon = tags$i(icon("people-group"),style = "font-size: 50px;"),
       color = "light-blue"
     )
   })
   
   
   
   tab_log_epci_react <- reactive({
     req(input$epci)
     tab_log_epci %>%
       filter(LIBEPCI == input$epci)
   })
   
   
   
   output$total_logements3 <- renderValueBox({
     valueBox(
       value = format(sum(tab_log_epci_react()$LOG), big.mark = " ", scientific = F), 
       subtitle =tags$div(
         "Logements",
         style = "font-weight: bold;"
       ),
       icon = tags$i(icon("house-chimney"),style = "font-size: 50px;"),
       color = "light-blue"
     )
   })
   
   
   
   
   
   output$RP_logements3 <- renderValueBox({
     valueBox(
       value = format(sum(tab_log_epci_react()$RP), big.mark = " ", scientific = F), 
       subtitle = tags$div( "Résidences principales",
                            style = "font-weight: bold;"),
       icon = tags$i( icon("house-flag"),style = "font-size: 50px;"),
       color = "light-blue"
     )
   })
   
   
   
   
   
   
   
   
   
   
   
   
   ## Sortie de la box "chiffres de l'epci" pour l'onglet "Marché"
   
   
   
   output$image_epci <- renderImage({
     list(src = paste0("IMAGES/",input$epci , ".jpg"), width = "350px" ,contentType = 'image/jpg', alt = "Image 1")
     
     # list(src ="CC de Cèze Cévennes.jpg", width = "600px", contentType = 'image/jpg', alt = "Image 1")
     
   },deleteFile=FALSE)
   
   
   
   stat_POP_304_react <- reactive({
     req(input$epci)
     stat_POP_304%>%
       filter(LIBEPCI == input$epci)
   })
   
   output$population4 <- renderValueBox({
     
     valueBox(
       value = format(stat_POP_304_react()$NB_POP_ACTU, big.mark = " ", scientific = F),
       subtitle = tags$div("Population",style = "font-weight: bold;"),
       icon = tags$i(icon("people-group"),style = "font-size: 50px;"),
       color = "light-blue"
     )
   })
   
   
   
   tab_log_epci_react <- reactive({
     req(input$epci)
     tab_log_epci %>%
       filter(LIBEPCI == input$epci)
   })
   
   
   
   output$total_logements4 <- renderValueBox({
     valueBox(
       value = format(sum(tab_log_epci_react()$LOG), big.mark = " ", scientific = F), 
       subtitle =tags$div(
         "Logements",
         style = "font-weight: bold;"
       ),
       icon = tags$i(icon("house-chimney"),style = "font-size: 50px;"),
       color = "light-blue"
     )
   })
   
   
   
   
   
   output$RP_logements4 <- renderValueBox({
     valueBox(
       value = format(sum(tab_log_epci_react()$RP), big.mark = " ", scientific = F), 
       subtitle = tags$div( "Résidences principales",
                            style = "font-weight: bold;"),
       icon = tags$i( icon("house-flag"),style = "font-size: 50px;"),
       color = "light-blue"
     )
   })
   
   
   
  
  
  
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
  
  ## ___  A. CHIFFRES CLEF ! (PARC SOCIAL) ####
  ## _____ A.1   PARC SOCIAL --> Parc ______________ ####
  
  ####________ A.1.1   HISTORIQUES DU PARC SOCIAL _________________####
  
  ##_____________ A.1.1.1   graphe1parc nb_log_historique___________####
  
  # Ici on rend la base interactive pour qu'elle se mette à jour en fonctin de l'epci choisi par l'utilisateur
  
  nb_log_historique_react <- reactive({
    req(input$epci)
    nb_log_historique %>%
      filter(LIBEPCI == input$epci)
  })
   nb_com_historique_react <- reactive({
     req(input$epci)
     nb_com_historique %>%
       filter(LIBEPCI == input$epci)
   })
   
  #Construction du graphe en sortie
   output$graphe1parc <- renderPlotly({
     
     y_min <- min(nb_log_historique_react()$effectif, na.rm = TRUE)
     y_max <- max(nb_log_historique_react()$effectif, na.rm = TRUE)
     
     # Ajouter un léger buffer autour des valeurs min et max pour ne pas coller aux bords
     buffer <- (y_max - y_min)*2   # 5% de buffer
     
     
     # Création du graphique avec les étiquettes
     graphe1parc <- plot_ly(nb_log_historique_react() %>%
                              group_by(MILLESIME) %>%
                              summarise(effectif = sum(effectif, na.rm = TRUE)), 
                            x = ~MILLESIME, 
                            y = ~effectif, 
                            type = 'bar', 
                            marker = list(color = "#508072"),
                            text = ~format(effectif, big.mark = " ") ,
                            hoverinfo = "x+text",
                            hovertext = ~paste("Nombre de communes équipées en logement social :", nb_com_historique_react()$Nb_com_couv, "<br>Nombre de communes du territoire :", nb_com_historique_react()$NB_com_total)
     )
                            # textposition = 'auto')  # Position des étiquettes
     
     # Personnalisation de la mise en page
     graphe1parc <- graphe1parc %>% layout(
       title = list( text = paste0("Evolution des logements sociaux ordinaires de ", min(nb_log_historique_react()$MILLESIME),
                                   " à ",max(nb_log_historique_react()$MILLESIME),
                                   "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>" ),
                     font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
       xaxis = list(title = "Année"),
       yaxis = list(title = "Nombre de logements",tickformat = ",."),
       
       margin = list(
         l = 50,  # marge gauche
         r = 50,  # marge droite
         b = 50,  # marge en bas
         t = 100  # marge en haut, on peut ajuster cette valeur pour laisser plus d'espace pour le titre
       ),
       # barmode = 'group', 
       bargap = 0.2,  # Espacement entre les barres groupées
       legend = list(orientation = "h", x = 0.5, y = 1.1),  # Position de la légende
       paper_bgcolor = 'white',  # Couleur de fond du papier
       plot_bgcolor = 'white',  # Couleur de fond du plot
       font = list(color = 'black'),
       legend = list(
         orientation = "h",   # Horizontal orientation
         bgcolor = ("rgba(0, 0, 0, 0)"),
         x = 0.5,             # Center the legend
         xanchor = "center",  # Align the center
         y = 1.15              # Position above the plot
         
       )
       
     )%>%
       add_annotations(
         text = "Source : RPLS<br>Traitement : ADIL30",
         xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
         x = 1, y = -0.20, showarrow = FALSE,  # Placement en bas à droite
         font = list(size = 9, color = 'gray')
       )
     
     
     
     return(graphe1parc)
   })
  
  
  # #DFEDF7 couleur bleu ciel 
  
 
   
  

  ### ____________ A.1.1.2   graphe2parc nb_log_typo_MES________####
  
  nb_log_typo_MES_react <- reactive({
    req(input$epci)
    nb_log_typo_MES %>%
      filter(LIBEPCI == input$epci)
  })
  
  
  output$graphe2parc <- renderPlotly({
    graphe2parc <- plot_ly(nb_log_typo_MES_react(), x = ~MILLESIME,
                           y = ~effectif, color = ~paste0("T",cat2_NBPIECE, " "),colors = colorabd, 
                           type = 'scatter', mode = 'lines+markers', line = list(shape = 'spline'),hoverinfo = "x+text",
                           hovertext = ~paste("Nombre de pièces :", cat2_NBPIECE, "<br>Nombre de logements :", paste(effectif, big.mark = " "))
                           ) %>%
      layout(title = list( text= paste0("Évolution des logements du parc social public mis en service<br> de ", min(nb_log_typo_MES_react()$MILLESIME) ," à ", max(nb_log_typo_MES_react()$MILLESIME) ," selon la typologie" ,
                                        "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"   ),
                           font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
             showlegend = TRUE,
             margin = list(
               l = 50,  # marge gauche
               r = 50,  # marge droite
               b = 50,  # marge en bas
               t = 100  # marge en haut
             ),
             xaxis = list(title = " "),
             yaxis = list(title = "Nombre de logements"),
             plot_bgcolor = "white",  # Couleur de fond du graphique
             paper_bgcolor = "white",  # Couleur de fond du papier
             font = list(color = 'black'),
             legend = list(
               orientation = "h",   # Horizontal orientation
               bgcolor = ("rgba(0, 0, 0, 0)"),
               x = 0.5,             # Center the legend
               xanchor = "center",  # Align the center
               y = -0.2              # Position above the plot
               
             )
             
      )%>%
      # Ajout de l'annotation pour la source en bas à droite
      add_annotations(
        text = "Source : RPLS<br>Traitement : ADIL30",
        xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
        x = 1, y = -0.25, showarrow = FALSE,  # Placement en bas à droite
        font = list(size = 9, color = 'gray')
      )
    
             
      
    
    
  })
  
  
  
  
  
  
  ### ____________ A.1.1.3 graphe3parc nb_log_fin_MES________####
  
  nb_log_fin_MES_react <- reactive({
    req(input$epci)
    nb_log_fin_MES %>%
      filter(LIBEPCI == input$epci)%>%
      mutate(categories_CUS_conv = factor(categories_CUS_conv, levels = c("PLAI", "PLUS","PLS"), ordered = F))
    # %>%
    #   mutate(TOTAL_MES = sum(effectif))
  })  
  
  output$graphe3parc <- renderPlotly({
    # Calcul du total par année
    data_total <- nb_log_fin_MES_react() %>%
      group_by(MILLESIME) %>%
      summarise(Total = sum(effectif, na.rm = TRUE)) %>%
      ungroup()
    
    # Graphique
    graphe3parc <- plot_ly() %>%
      # Barres empilées
      add_bars(
        data = nb_log_fin_MES_react(),
        x = ~MILLESIME, 
        y = ~effectif, 
        color = ~categories_CUS_conv, 
        colors = "Dark2", 
        hoverinfo = "x+text",
        hovertext = ~paste("Type de financement :", categories_CUS_conv, 
                           "<br>Nombre de logements :", format(effectif, big.mark = " "))
      ) %>%
      # Ligne pour le volume total
      add_lines(
        data = data_total,
        x = ~MILLESIME,
        y = ~format(Total, big.mark = " "),line = list(shape = 'spline', color = "black"),mode = 'lines+markers',text = ~Total, marker = list(color = "black"),
        textposition = 'top',
        name = "Volume total",  # Légende de la courbe
        textfont = list(color = 'black',size = 11,  family = 'Arial Black'),  # Style de la ligne
        hoverinfo = "x+text",
        hovertext = ~paste("Volume total :", format(Total, big.mark = " "))
      ) %>%
      # Mise en page
      layout(
        title = list(text = paste0("Évolution des logements du parc social public mis en service<br>de ",
                                   min(nb_log_fin_MES_react()$MILLESIME), 
                                   " à ", max(nb_log_fin_MES_react()$MILLESIME), 
                                   " selon le financement",
                                   "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                     font = list(size = 15, color = 'black', family = 'Arial Black', bold = TRUE)),
        showlegend = TRUE,
        margin = list(
          l = 50,  # marge gauche
          r = 50,  # marge droite
          b = 50,  # marge en bas
          t = 100  # marge en haut
        ),
        xaxis = list(title = ""),
        yaxis = list(title = "Nombre de logements"),
        barmode = "stack",
        plot_bgcolor = "white",  # Couleur de fond du graphique
        paper_bgcolor = "white", # Couleur de fond du papier
        font = list(color = 'black'),
        legend = list(
          traceorder = "normal",
          orientation = "h",   # Légende horizontale
          bgcolor = ("rgba(0, 0, 0, 0)"),
          x = 0.5,             # Centrer la légende
          xanchor = "center",  # Alignement centré
          y = -0.2             # Position au-dessus du graphique
        )
      ) %>%
      # Annotation pour la source
      add_annotations(
        text = "Source : RPLS<br>Traitement : ADIL30",
        xref = 'paper', yref = 'paper',  # Références pour l'annotation
        x = 1, y = -0.3, showarrow = FALSE,  # Placement en bas à droite
        font = list(size = 9, color = 'gray')
      )
    
    graphe3parc
  })
  
  
  
  
  
  ##_____________ A.1.1.4   graphe9parc Taux_mobi_historique___________####
  
  
  taux_mob_react <- reactive({
    req(input$epci)
    taux_mob %>%
      filter(LIBEPCI == input$epci)
    
  })
  
  
  output$graphe9parc <- renderPlotly ({
    
    graphe9parc <- taux_mob_react() %>%
      plot_ly(
        x=~as.factor(MILLESIME),y=~mob, type = 'scatter',
        mode = 'lines+markers',
        line = list(shape = 'spline', color= "#187882"),
        # color =  "Tension",
        text = ~format(mob, big.mark = " "),
        textposition = 'top',
        textfont = list(color = 'black',bold = TRUE,  family = 'Arial Black'),
        # textfont = list(color = 'black', bold = T),
        marker = list(color = "#006b73"),
        hoverinfo= 'x+text',
        hovertext = ~ paste0("Taux de mobilité : ",tx_mob,"%"
                            # , "<br>Nombre d'emménagements :",mob 
                            )
      )%>%
      
      layout(
        title = list(text=paste0("Evolution des emménagements de ", min(taux_mob_react()$MILLESIME), " à ", max(taux_mob_react()$MILLESIME),
                                 "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>" ),
                     font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
        margin = list(
          l = 50,  # marge gauche
          r = 50,  # marge droite
          b = 50,  # marge en bas
          t = 100  # marge en haut
        ),
        xaxis = list(title = "Année"),
        yaxis = list(title = "Nombre"),
        paper_bgcolor = 'white',
        plot_bgcolor = "white",
        font = list(color = 'black'))%>%
      # Ajout de l'annotation pour la source en bas à droite
      add_annotations(
        text = "Source : RPLS<br>Traitement : ADIL30",
        xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
        x = 1, y = -0.17, showarrow = FALSE,  # Placement en bas à droite
        font = list(size = 9, color = 'gray')
      )
    
    
    
  })
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  ###________ A.1.2  CARACTERISTIQUES DU PARC SOCIAL ACTUEL _____________####
  
  ###____________ A.1.2.1  graphe4parc log_total_nbpiece (2023)  ####
  
  
  log_total_nbpiece_react <- reactive({
    req(input$epci)
    log_total_nbpiece %>%
      filter(LIBEPCI == input$epci)
      # mutate(cat2_NBPIECE = factor(cat2_NBPIECE, levels = cat2_NBPIECE, ordered = F))
  })
  
  ## Construction du graphe
  output$graphe4parc <- renderPlotly({

    ## Le graphe ci dessous represente aussi le graphe4parc mais avec un camambert
    # graphe4parc <- log_total_nbpiece_react()%>%
    #   mutate("Percent" = round((effectif*100)/(sum(effectif)),0)) %>%
    #   plot_ly(
    #     labels = ~cat2_NBPIECE,
    #     values = ~effectif,
    #     text = ~paste0(Percent,"%"),
    #     insidetextfont = list(color = 'white'),
    #     hoverinfo = 'text',
    #     hovertext= ~paste("Nombre de pièces :" ,cat2_NBPIECE, '<br>Nombre de logements :',format(effectif, big.mark = " "), '<br>Proportion :', Percent,'%'),
    #     textinfo = 'text',
    # 
    #     insidetextfont = list(color = 'black'),
    #     sort = F,
    #     marker = list(colors = "Greens"))
    # graphe4parc <- graphe4parc %>% add_pie(hole = 0)
    # 
    # graphe4parc <- graphe4parc %>% layout(title = "Proportion des logements par typologie",  showlegend = T,
    #                                       margin = list(
    #                                         l = 50,  # marge gauche
    #                                         r = 50,  # marge droite
    #                                         b = 50,  # marge en bas
    #                                         t = 100  # marge en haut
    #                                       ),
    #                                       paper_bgcolor = '#EDF7FF',  # couleur de fond du papier
    #                                       plot_bgcolor = '#EDF7FF',
    #                                       font = list(color = 'black'),
    # 
    #                                       xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
    # 
    #                                       yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
    # graphe4parc

    
  
  
  
  
  graphe4parc <- plot_ly(
    log_total_nbpiece_react() %>%
      group_by(MILLESIME) %>%
      mutate(Proportion = effectif / sum(effectif)) %>%
      ungroup(),
    x = ~Proportion, 
    y = ~paste0("T",cat2_NBPIECE, " "),

    color = ~cat2_NBPIECE, 
    
    type = 'bar', 
    orientation = 'h', showlegend = F,
    
    hoverinfo = 'text',  # Information affichée au survol (année et texte)
    hovertext = ~paste('Nombre de pièces : ', cat2_NBPIECE, '<br>Nombre de logements :', format(effectif, big.mark = " ")),  # Texte affiché au survol
    text = ~paste0(scales::percent(Proportion, accuracy = 1)," (",   format(effectif, big.mark = " ")     ,")"),
    textposition = 'auto',
    textfont = list(color = 'black'),
    colors = "BuGn"
    # colors = "RdBu"
  ) %>%
    layout(
      title = list( text = paste0("Répartition des logements du parc social public en ",max(log_total_nbpiece_react()$MILLESIME) , "<br>selon la typologie" ,
                                  "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"   ) ,
                    font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
      margin = list(
        l = 50,  # marge gauche
        r = 50,  # marge droite
        b = 50,  # marge en bas
        t = 100  # marge en haut
      ),
      xaxis = list(title = " ",tickformat = ",.0%",
                   tickvals = c(0,50,100),
                   ticktext = c(" "," "," ")),
      yaxis = list(title = "Type de logement"),
      barmode = 'stack',
      paper_bgcolor = 'white',
      plot_bgcolor = "white",
      font = list(color = 'black'))%>%
    # Ajout de l'annotation pour la source en bas à droite
    add_annotations(
      text = "Source : RPLS<br>Traitement : ADIL30",
      xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
      x = 1, y = 0, showarrow = FALSE,  # Placement en bas à droite
      font = list(size = 9, color = 'gray')
    )
  
    
  
    
    
    
    
    
    
  })

  
  
  
  
  ### ____________ A.1.2.2 graphe5parc nblog_finDetail (2023) ______#### 
  
  nblog_finDetail_react <- reactive({
    req(input$epci)
    nblog_finDetail %>%
   filter(LIBEPCI == input$epci)%>%
      mutate(categories_CUS_conv = factor(categories_CUS_conv, levels = c("PLAI", "PLUS","PLS"), ordered = T))
      
  })
 

    output$graphe5parc <- renderPlotly({

      # Chargement des couleurs de la palette "YlGn"
      color_parc <- RColorBrewer::brewer.pal(n = length(unique(Dem_log_actuel_react()$categories_CUS_conv)), "Dark2")


      graphe5parc <- nblog_finDetail_react()%>%
        mutate("Percent" = round((effectif*100)/(sum(effectif)),0)) %>%
        plot_ly(
          labels = ~categories_CUS_conv,
          values = ~effectif,
          text = ~paste0(Percent,"%"),
          insidetextfont = list(color = 'white'),
          hoverinfo = 'text',
          hovertext= ~paste0( "Type de financement : ", categories_CUS_conv, '<br>Nombre de logements : ' , format(effectif, big.mark = " "),  "<br>Proportion : ",Percent,'%'),
          textinfo = 'text',

          insidetextfont = list(color = 'black'),
           sort = F,
          marker = list(colors = color_parc))
      graphe5parc <- graphe5parc %>% add_pie(hole = 0.5, domain = list(x = c(1, 0.9), y = c(1,0.9))  )

      graphe5parc <- graphe5parc %>% layout(title=list(text = paste0("Répartition des logements du parc social public en ",nblog_finDetail_react()$MILLESIME ,"<br>selon le financement",
    "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
     font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
    showlegend = T,
                                            margin = list(
                                              l = 50,  # marge gauche
                                              r = 50,  # marge droite
                                              b = 50,  # marge en bas
                                              t = 100  # marge en haut
                                            ),
                                            paper_bgcolor = 'white',  # couleur de fond du papier
                                            plot_bgcolor = 'white',
                                            font = list(color = 'black'),

                                            xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),

                                            yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
                                            legend = list(
                                              traceorder = "normal",
                                              orientation = "h",   # Horizontal orientation
                                              bgcolor = ("rgba(0, 0, 0, 0)"),
                                              x = 0.5,             # Center the legend
                                              xanchor = "center",  # Align the center
                                              y = -0.08              # Position above the plot

                                            )

      )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : RPLS<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.2, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      graphe5parc




    })

    
    
    
    
    
    # 
    # output$graphe5parc <- renderPlotly({
    #   
    #   
    #   # Le graphe ci dessous represente aussi le graphe5parc mais avec un camambert
    #   nblog_finDetail_react <- reactive({
    #     req(input$epci)
    #     nblog_finDetail %>%
    #       filter(LIBEPCI == input$epci)
    #   })
    #   
  #   graphe5parc <- plot_ly(
  #     nblog_finDetail_react() %>%
  #       group_by(MILLESIME) %>%
  #       mutate(Proportion = effectif / sum(effectif)) %>%
  #       ungroup(),
  #     x = ~Proportion,
  #     y = ~paste0(categories_CUS_conv, " "),
  #     color = ~categories_CUS_conv,
  # 
  #     type = 'bar',
  #     orientation = 'h', showlegend = F,
  # 
  #     hoverinfo = 'text',  # Information affichée au survol (année et texte)
  #     hovertext = ~paste('Type de financement : ', categories_CUS_conv, '<br>Nombre de logements :', format(effectif, big.mark = " ")),  # Texte affiché au survol
  #     text = ~paste0(scales::percent(Proportion, accuracy = 1)),
  #     textposition = 'outside',
  #     textfont = list(color = 'black'),
  #     colors = "Dark2"
  #     # colors = "RdBu"
  #   ) %>%
  #     layout(
  #       title = list(text = paste0("Répartition des logements du parc social public en ",nblog_finDetail_react()$MILLESIME ," selon le financement",
  #                                  "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
  #                    font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
  #       margin = list(
  #         l = 50,  # marge gauche
  #         r = 50,  # marge droite
  #         b = 50,  # marge en bas
  #         t = 100  # marge en haut
  #       ),
  #       xaxis = list(title = " ",tickformat = ",.0%",
  #                    tickvals = c(0,50,100),
  #                    ticktext = c(" "," "," ")),
  #       yaxis = list(title = "Financements"),
  #       barmode = 'stack',
  #       paper_bgcolor = 'white',
  #       plot_bgcolor = "white",
  #       font = list(color = 'black'))%>%
  #     # Ajout de l'annotation pour la source en bas à droite
  #     add_annotations(
  #       text = "Source : RPLS<br>Traitement : ADIL30",
  #       xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
  #       x = 1, y = 0, showarrow = FALSE,  # Placement en bas à droite
  #       font = list(size = 9, color = 'gray')
  #     )
  # 
  #     
  #   
  #   
  #   
  #   
  # })
  # 
  
  
  
  
  
  
 
  
  
  
  
  ###____________ A.1.2.3  graphe6parc dpe_1 (2023) ___####
  
  dpe_1_react <- reactive({
    req(input$epci)
    dpe_1 %>%
      filter(LIBEPCI == input$epci)
  })   
  
  
  
  output$graphe6parc <- renderPlotly({
    
    # Palette inversée RdYlGn
    palette_inverse <- rev(brewer.pal(9, "RdYlGn"))
    # Ajouter une couleur grise à la fin
    palette_dpe <- c(palette_inverse, "#B0B0B0")
    
    data_tot <- dpe_1_react() %>%
      mutate("percent" = ((effectif*100)/sum(effectif, na.rm = T)))
      
    graphe6parc <- plot_ly(dpe_1_react(), x = ~DPEENERGIE, y = ~effectif, type = 'bar', 
                            color = ~DPEENERGIE, colors = palette_dpe,
                           hoverinfo = 'text',  # Information affichée au survol (année et texte)
                           hovertext = ~paste0('Niveau de performance : ', DPEENERGIE, '<br>Proportion : ', round(data_tot$percent,0),"%"),  # Texte affiché au survol
                           text = ~format(effectif, big.mark = " "),
                           textposition = 'auto', showlegend = F,
                           textfont = list(color = 'black')) %>%
      layout(title = list(text = paste0("Répartition des logements du parc social public en ",max(dpe_1_react()$MILLESIME) ," selon<br>la performance énergetique",
                                        "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                          font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
             margin = list(
               l = 50,  # marge gauche
               r = 50,  # marge droite
               b = 50,  # marge en bas
               t = 100  # marge en haut
             ),
             xaxis = list(title = 'DPE ENERGIE'),
             yaxis = list(title = 'Nombre de logements',tickformat = ",."),
             plot_bgcolor = 'white', # Couleur de fond du plot
             paper_bgcolor = 'white', # Couleur de fond du papier
             font = list(color = 'black'))%>%
      # Ajout de l'annotation pour la source en bas à droite
      add_annotations(
        text = "Source : RPLS<br>Traitement : ADIL30",
        xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
        x = 1, y = -0.20, showarrow = FALSE,  # Placement en bas à droite
        font = list(size = 9, color = 'gray')
      )
    
             
             

  })
  
  
  

  
  
  
  
  
  
 
    
    
    
    ###____________ A.1.2.4 graphe7parc lnblog_finDetail_nbp (2023) _____####
    
  
  nblog_finDetail_nbp_react <- reactive({
    req(input$epci)
    nblog_finDetail_nbp %>%
      filter(LIBEPCI == input$epci)%>%
      mutate(categories_CUS_conv = factor(categories_CUS_conv, levels = c("PLAI", "PLUS","PLS", "PLI"), ordered = F))
  })
    
   output$graphe7parc <- renderPlotly({
     
    graphe7parc <- plot_ly(nblog_finDetail_nbp_react(),
                           x = ~paste0("T",cat2_NBPIECE),
                           y = ~effectif , 
                           type = 'bar',
                           color = ~categories_CUS_conv, 
                           colors = "Dark2", text=~format(effectif, big.mark = " "),
                           textposition = "inside",
                           insidetextfont = list(color = "white"),outsidetextfont = list(color = "black"),
                           hoverinfo = 'text',  # Information affichée au survol (année et texte)
                           hovertext = ~paste('Type de financement : ', categories_CUS_conv,'<br>Nombre de pièces :', cat2_NBPIECE, '<br>Nombre de logements :', format(effectif, big.mark = " ")))%>%  # Texte affiché au survol) 
    layout(title = list(text =  paste0("Répartition des logements du parc social public en ",max(nblog_finDetail_nbp_react()$MILLESIME) ," selon<br>la typologie et financement",
                                       "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>" ) ,
                        font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
           margin = list(
             l = 50,  # marge gauche
             r = 50,  # marge droite
             b = 50,  # marge en bas
             t = 100  # marge en haut
           ),
           xaxis = list(title = ""),
           yaxis = list(title = "Nombres de logements",tickformat = ",."),
           barmode = 'stack',
           paper_bgcolor = 'white',
           plot_bgcolor = "white" ,
           font = list(color = 'black'),
           legend = list(
             traceorder = "normal",
             orientation = "h",   # Horizontal orientation
             bgcolor = ("rgba(0, 0, 0, 0)"),
             x = 0.5,             # Center the legend
             xanchor = "center",  # Align the center
             y = -0.2              # Position above the plot
             
           )
           
    )%>%
      # Ajout de l'annotation pour la source en bas à droite
      add_annotations(
        text = "Source : RPLS<br>Traitement : ADIL30",
        xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
        x = 1, y = -0.3, showarrow = FALSE,  # Placement en bas à droite
        font = list(size = 9, color = 'gray')
      )
    
           
           
           




      
   })
      
      
   ###____________ A.1.2.3 graphe8parc loy types-financement (2023) _____####
   
   
   loy_react <- reactive({
     req(input$epci)
     loy %>%
       filter(LIBEPCI == input$epci)%>%
       mutate(categories_chiffrescles = factor(categories_chiffrescles, levels = c("PLI et assimilés",
                                                                                   "PLS (Intermédiare)",
                                                                                   "PLUS (Social)",
                                                                                   "PLAI (Très Social)",
                                                                                   "Autres à partir de 1977 assimilés PLS",
                                                                                   "Autres à partir de 1977 assimilés PLUS",
                                                                                   "Autres à partir de 1977 assimilés PLAI",
                                                                                   "Antérieurs à 1977"), ordered = TRUE))%>%
       arrange(categories_chiffrescles)
     
 
                                               
   })
   
   
   output$graphe8parc <- renderPlotly({
    
     graphe8parc <-  plot_ly(
       type = 'table',
       header = list(
         values = c('<b>Types de financements</b>', '<b>T1</b>', '<b>T2</b>', '<b>T3</b>', '<b>T4</b>', '<b>T5et+</b>'),
         align = 'center',
         line = list(width = 1, color = 'black'),
         fill = list(color = '#575756'),
         font = list(family = "Arial", size = 11, color = "white")
       ),
       cells = list(
         values = rbind(as.character(loy_react()$categories_chiffrescles), paste0(loy_react()$`1`,"€"), paste0(loy_react()$`2`,"€"), paste0(loy_react()$`3`,"€"),  paste0(loy_react()$`4`,"€"),  paste0(loy_react()$`5et+`,"€")),
         align = 'center',
         line = list(color = "#706159", width = 1),
         fill = list(color = c('#87b0cc', 'white')),
         font = list(family = "Arial", size = 12, color = c('black'))
       )
     )
     graphe8parc %>%
       layout(title = list ( text = paste0("Loyers mensuels hors charges médians en ", max(loy_react()$MILLESIME), " <br>selon la typologie et financement",
                                           "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                             font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
              margin = list(
                l = 50,  # marge gauche
                r = 50,  # marge droite
                b = 75,  # marge en bas
                t = 100  # marge en haut
              ),
              
              plot_bgcolor = 'white', # Couleur de fond du plot
              paper_bgcolor = 'white', # Couleur de fond du papier
              font = list(color = 'black'))%>%
       # Ajout de l'annotation pour la source en bas à droite
       add_annotations(
         text = "Source : RPLS<br>Traitement : ADIL30",
         xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
         x = 1, y = -0.10, showarrow = FALSE,  # Placement en bas à droite
         font = list(size = 9, color = 'gray')
       )
     
     
   })    
   
   
      
      
    
    
  
   ## _____ A.2   PARC SOCIAL --> Demandes ______________ ####
   
   ####________ A.2.1   HISTORIQUE DE LA DEMANDE _________________####
   
   ##_____________ A.2.1.1   graphe1dm Dem_historique___________####
   

   Dem_historique_react <- reactive({
     req(input$epci)
     Dem_historique %>%
       filter(LIBEPCI == input$epci)
   })
   
   
   output$graphe1dem <- renderPlotly({
     
     data_prop <- Dem_historique_react() %>%
       group_by(MILLESIME) %>%
       mutate(Proportion = (Nombre_demandes*100) / Demande_totale) %>%
       ungroup()

     
     data2 = Dem_historique_react() %>%
       group_by(MILLESIME, LIBEPCI,Demande_totale)%>%
       summarise(.groups = "drop")
     
     
     
     graphe1dem <-plot_ly()%>%
       add_bars( 
       data = Dem_historique_react(), 
       x = ~MILLESIME, 
       y = ~Nombre_demandes, 
       color = ~Type_demande, 
       colors =  colordem,

       hoverinfo = 'x+text',  # Information affichée au survol (x ( annee) et texte)
       hovertext = ~paste('Type de demande:', Type_demande,"<br>Proportion : ",round(data_prop$Proportion,0),"%" ,'<br>Nombre de demandes:', format(Nombre_demandes, big.mark = " "))  # Texte affiché au survol
     ) %>%
       add_lines(
         data  =  data2 ,
         x = ~MILLESIME,
         y = ~Demande_totale,
         line = list(shape = 'spline', color = "black"),  # Ajout du 'spline' ici
         mode = 'lines+markers',  
         text = ~format(Demande_totale, big.mark = " "),
         marker = list(color = "black"),
         name =  "Demande totale",
         textposition = 'top',
         textfont = list(color = 'black', family = "Arial Black", size = 11),
         name = "Demande totale",
         # showlegend = T,
         hoverinfo = 'skip'  # Ignorer l'affichage des étiquettes lors du survol
       ) %>%
       layout(
         title = list(text = paste0("Evolution des demandes de logements sociaux de ",min(Dem_historique_react()$MILLESIME) ," à ",max(Dem_historique_react()$MILLESIME),"<br>selon le type",
                                    "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                      font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
         margin = list(
           l = 50,  # marge gauche
           r = 50,  # marge droite
           b = 50,  # marge en bas
           t = 100  # marge en haut
         ),
         xaxis = list(title = "Année"),
         yaxis = list(title = "Nombre de demandes",tickformat = ",."),
         barmode = 'stack',
         paper_bgcolor = 'white',
         plot_bgcolor = "white",
         font = list(color = 'black'),
         legend = list(
           orientation = "h",   # Horizontal orientation
           bgcolor = ("rgba(0, 0, 0, 0)"),
           x = 0.5,             # Center the legend
           xanchor = "center",  # Align the center
           y = 1.05              # Position above the plot
           
         )
         
       )%>%
       # Ajout de l'annotation pour la source en bas à droite
       add_annotations(
         text = "Source : SNE<br>Traitement : ADIL30",
         xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
         x = 1, y = -0.16, showarrow = FALSE,  # Placement en bas à droite
         font = list(size = 9, color = 'gray')
       )
     
       

})


   
   
   # ##_____________ A.2.1.2   graphe2dm Dem_historique ___________####
   # 
   # 
   # output$graphe2dem <- renderPlotly({
   #   
   #   
   #   # Créer le graphique avec plot_ly
   #   graphe2dem <- plot_ly(
   #     Dem_historique_react() %>%
   #       group_by(MILLESIME) %>%
   #       mutate(Proportion = Nombre_demandes / Demande_totale) %>%
   #       ungroup(),
   #     x = ~MILLESIME, 
   #     y = ~Proportion, 
   #     color = ~Type_demande, 
   #     type = 'bar', 
   #     hoverinfo = 'x+text',  # Information affichée au survol (x ( annee) et texte)
   #     hovertext = ~paste('Type de demande:', Type_demande, '<br>Proportion :', paste0(scales::percent(Proportion, accuracy = 1))),  # Texte affiché au survol
   #   
   #     text = ~paste0(scales::percent(Proportion, accuracy = 1)),
   #     textposition = 'inside',
   #     textfont = list(color = 'white'),
   #     colors = colorama) %>%
   #     layout(
   #       title = list(text=paste0("Evolution de la répartition des demandes de logements sociaux<br>de ",min(Dem_historique_react()$MILLESIME)," à ",max(Dem_historique_react()$MILLESIME)," selon le type",
   #                                "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
   #                    font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
   #       margin = list(
   #         l = 50,  # marge gauche
   #         r = 50,  # marge droite
   #         b = 50,  # marge en bas
   #         t = 100  # marge en haut
   #       ),
   #       xaxis = list(title = "Année"),
   #       yaxis = list(title = "Proportion", tickformat = ",.0%"),
   #       barmode = 'stack',
   #       paper_bgcolor = 'white',
   #       plot_bgcolor = "white" ,
   #       font = list(color = 'black'),
   #       legend = list(
   #         orientation = "h",   # Horizontal orientation
   #         bgcolor = ("rgba(0, 0, 0, 0)"),
   #         x = 0.5,             # Center the legend
   #         xanchor = "center",  # Align the center
   #         y = 1.06              # Position above the plot
   #         
   #       )
   #       
   #     )%>%
   #     # Ajout de l'annotation pour la source en bas à droite
   #     add_annotations(
   #       text = "Source : SNE<br>Traitement : ADIL30",
   #       xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
   #       x = 1, y = -0.16, showarrow = FALSE,  # Placement en bas à droite
   #       font = list(size = 9, color = 'gray')
   #     )
   #   
   #     
   #   # '#B1ACB1'
   #   
   # })
   # 
   
   
   
   ##_____________ A.2.1.3   graphe3dm Dem_historique_pl_hlm ___________####
   
   Dem_pl_hlm_react <- reactive({
     req(input$epci)
     Dem_pl_hlm %>%
       filter(LIBEPCI == input$epci)%>%
       mutate(Caracteristiques = factor(Caracteristiques, 
                                        
                                        levels = c("=< PLAI","> PLAI et =< PLUS","> PLUS et =<PLS" ,  "> PLS"), ordered = T))
   })
   
   output$graphe2dem <- renderPlotly({
     
     data_prepared <- Dem_pl_hlm_react() %>%
       group_by(MILLESIME, Caracteristiques)  %>%
       summarise(Demande_totale = sum(Demande_totale, na.rm = TRUE),
                 Mutation = sum(Mutation, na.rm = TRUE),
                 Hors.mutation = sum(Hors.mutation, na.rm = TRUE)) %>%
       ungroup()
     
     # Créer le graphique funnel sans boucle
     graphe2dem <- plot_ly(
  data_prepared
  , 
  type = "bar", orientation = "h",
  x = ~format(data_prepared$Demande_totale, big.mark = " "), 
  y = ~as.character(MILLESIME),
  name=~Caracteristiques,
  color = ~Caracteristiques, 
  colors = coloryou,  
  text = ~format(Demande_totale, big.mark = " "), 
  textposition = 'auto',
  hoverinfo = 'y+text',
  hovertext = ~paste0( 'Plafond : ', Caracteristiques,"<br>Mutation : ", format(data_prepared$Mutation, big.mark = " "),"<br>Hors mutation : ", format(data_prepared$Hors.mutation, big.mark = " ")),
  # textposition = 'inside',
  textfont = list(color = 'white')
) %>%
       layout(
         title = list(text=paste0("Evolution de la répartition des demandes de logements sociaux de ",min(data_prepared$MILLESIME)," à ",max(data_prepared$MILLESIME),"<br>selon les ressources (Plafond hlm) ",
                                  "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                      font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
         margin = list(
           l = 50,  # marge gauche
           r = 30,  # marge droite
           b = 25,  # marge en bas
           t = 110  # marge en haut
         ),
         barmode = "stack",
         yaxis = list(title = "Année"),
         xaxis = list(title = "",showticklabels = FALSE),
         # legend = list(traceorder = "normal") ,
         plot_bgcolor = "white",  # Couleur de fond du graphique
         paper_bgcolor = "white",# Couleur de fond du papier
         font = list(color = 'black'),
         legend = list(
           traceorder = "normal",
           orientation = "h",   # Horizontal orientation
           bgcolor = ("rgba(0, 0, 0, 0)"),
           x = 0.5,             # Center the legend
           xanchor = "center",  # Align the center
           y = 1.08              # Position above the plot
           
         )
         
       )%>%
       # Ajout de l'annotation pour la source en bas à droite
       add_annotations(
         text = "Source : SNE<br>Traitement : ADIL30",
         xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
         x = 1, y = -0.05, showarrow = FALSE,  # Placement en bas à droite
         font = list(size = 9, color = 'gray')
       )
     
       
   })   
   

   
   
   
   
   
   
   ####________ A.2.2   CARACTERISTIQUES DE LA DEMANDE DE LOGEMENTS SOCIAUX ACTUELLE _________________####
   
   
##_____________ A.2.2.1   graphe4dm Dem_age ___________####

   
    Dem_age_react <- reactive({
      req(input$epci)
      Dem_age %>%
        filter(LIBEPCI == input$epci)
    })


    output$graphe4dem <- renderPlotly({

      graphe4dem <- plot_ly(
        Dem_age_react() %>%
          group_by(MILLESIME) %>%
          mutate(Proportion = (Demande_totale*100) / sum(Demande_totale)) %>%
          ungroup(),
        x = ~Proportion, 
        y = ~paste0(Caracteristiques, "  "),
        color = ~Caracteristiques, 
        type = 'bar', showlegend = F ,
        orientation = 'h',
        
        hoverinfo = 'text',  # Information affichée au survol (année et texte)
        hovertext = ~paste('Tranche d\'âge : ', Caracteristiques, '<br>Nombre de demandes :', format(Demande_totale, big.mark = " ")),  # Texte affiché au survol
        text = ~paste0(   round(Proportion,0), "%"   ," (" ,(format((Mutation+Hors.mutation), big.mark = " ")), ")"),
        textposition = 'auto',
        textfont = list(color = 'black'),
        colors = "RdPu"
        # colors = "RdBu"
      ) %>%
        layout(
          title = list(text = paste("Répartition des demandes de logements sociaux en ", max(Dem_age_react()$MILLESIME),"<br>selon la tranche d'âge des demandeurs",
                                    "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                       font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
          margin = list(
            l = 50,  # marge gauche
            r = 50,  # marge droite
            b = 50,  # marge en bas
            t = 100  # marge en haut
          ),
          xaxis = list(  title = " ",tickformat = ",.0%",
                        tickvals = c(0,50,100),
                        ticktext = c(" "," "," ")),
          yaxis = list(title = " "),
          barmode = 'stack',
          paper_bgcolor = 'white',
          plot_bgcolor = "white",
          font = list(color = 'black')
          )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : SNE<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.05, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
      
      



 })

    
    
   
    ##_____________ A.2.2.2   graphe5dm Dem_log_actuel ___________####
    
    
    
    
    Dem_log_actuel_react <- reactive({
      req(input$epci)
      Dem_log_actuel %>%
        filter(LIBEPCI == input$epci)
    })
    
    
    output$graphe5dem <- renderPlotly({

      # Chargement des couleurs de la palette RdPu
      color_dem <- RColorBrewer::brewer.pal(n = length(unique(Dem_log_actuel_react()$Caracteristiques)), "Dark2")

      graphe5dem <- Dem_log_actuel_react()%>%
        mutate("Percent" = round((Demande_totale*100)/(sum(Demande_totale)),0)) %>%
        plot_ly(
          labels = ~Caracteristiques,
          values = ~Demande_totale,

          text = ~paste0(Percent,"%"),
          insidetextfont = list(color = 'white'),
          hoverinfo = 'text',
          hovertext= ~paste( Caracteristiques, '<br>Nombre de demandes :',format(Demande_totale, big.mark = " "), '<br>', Percent,'%'),
          textinfo = 'text',
          sort = F,
 
            # insidetextfont = list(color = 'black'),
            marker = list(colors = color_dem))
      graphe5dem <- graphe5dem %>% add_pie(hole = 0.5, domain = list(x = c(0, 1), y = c(0, 1))  )
      
      graphe5dem <- graphe5dem %>% layout(title = list(text=paste0("Répartition des demandes de logements sociaux en " ,max(Dem_log_actuel_react()$MILLESIME)," selon<br>la situation de logement des demandeurs",
                                                                   "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                                                       font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),  showlegend = T, 
                                          margin = list(
                                            l = 50,  # marge gauche
                                            r = 50,  # marge droite
                                            b = 50,  # marge en bas
                                            t = 100  # marge en haut
                                          ),
                                          paper_bgcolor = 'white',  # couleur de fond du papier
                                            plot_bgcolor = 'white',
                                            font = list(color = 'black'),
                                          
                                          xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
                                          
                                          yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
                                          legend = list(
                                            orientation = "h",   # Horizontal orientation
                                            bgcolor = ("rgba(0, 0, 0, 0)"),
                                            x = 0.5,             # Center the legend
                                            xanchor = "center",  # Align the center
                                            y = -0.08              # Position above the plot
                                            
                                          )
                                          
      )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : SNE<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.4, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
    
      graphe5dem

    })
    
    
    
    
    
    ##_____________ A.2.2.3   graphe6dm Dem_anciennete ___________####
    
    
    
    Dem_anciennete_react <- reactive({
      req(input$epci)
      Dem_anciennete %>%
        filter(LIBEPCI == input$epci) %>%
        mutate(Caracteristiques = factor(Caracteristiques, levels = c("< 1 an" ,"1 à <  2 ans" ,"2 à < 3 ans" ,"3 ans ou +"), ordered = F))
    })
    
    

    output$graphe6dem <- renderPlotly({
      
      graphe6dem <- plot_ly(Dem_anciennete_react(), x = ~Caracteristiques, y = ~Demande_totale,
                             color = ~Caracteristiques,
                            text= ~format(Demande_totale, big.mark = " "),
                            textposition = 'auto',
                            textfont = list(color = 'black'),
                            hoverinfo = 'text',  # Information affichée au survol (année et texte)
                            hovertext = ~paste('Ancienneté de la demande : ', Caracteristiques, "<br>Mutation : ", format(Mutation, big.mark = " "),"<br>Hors mutation : ", format(Hors.mutation, big.mark = " ")),  # Texte affiché au survol
                            
                            colors = "RdPu", type = 'bar', showlegend = F) %>%
        layout(title = list(text=paste0("Répartition des demandes de logements sociaux en ",max(Dem_anciennete_react()$MILLESIME),"<br>selon l'ancienneté des demandes",
                                        "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                            font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
               showlegend = TRUE,
               
               
               # textfont = list(color = 'white'),
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               xaxis = list(title = "Ancienneté"),
               yaxis = list(title = "Nombre de demandes",tickformat = ",."),
               plot_bgcolor = "white",  # Couleur de fond du graphique
               paper_bgcolor = "white",# Couleur de fond du papier
               font = list(color = 'black'),
               legend = list(
                 orientation = "h",   # Horizontal orientation
                 bgcolor = ("rgba(0, 0, 0, 0)"),
                 x = 0.5,             # Center the legend
                 xanchor = "center",  # Align the center
                 y = 1.15              # Position above the plot
                 
               )
               
        )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : SNE<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.17, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
        
      
      
      
    })
    
    
    
    
    
    
    
    
    
    ##_____________ A.2.2.4   graphe7dm Dem_typo ___________####
    
    
    Dem_typo_react <- reactive({
      req(input$epci)
      Dem_typo %>%
        filter(LIBEPCI == input$epci)%>%
        mutate(pourcent = ((Demande_totale*100)/(sum(Demande_totale))))
    })
    
    
    output$graphe7dem <- renderPlotly({
      
      graphe7dem <- plot_ly(
        Dem_typo_react(),
        x = ~Demande_totale, 
        y = ~paste0(Caracteristiques, " "),
        color = ~Caracteristiques,
        colors = "RdPu",showlegend = FALSE, 
        type = 'bar', 
        text=~paste0(   round(pourcent,0), "%"   ," (" ,(format((Mutation+Hors.mutation), big.mark = " ")), ")"),

        hoverinfo = 'text',  # Information affichée au survol (année et texte)
        hovertext = ~paste0('Typologie : ', Caracteristiques, '<br>Mutation : ', format(Mutation, big.mark = " "), '<br>Hors mutation : ',format(Hors.mutation, big.mark = " ")),  # Texte affiché au survol

        textposition = 'auto',
        insidetextfont = list(color = 'black'), outsidetextfont = list(color = 'black')
       
        # colors = "RdBu"
      ) %>%
        layout(
          title = list(text = paste("Répartition des demandes de logements sociaux en ", max(Dem_typo_react()$MILLESIME),"<br>selon la typologie demandée"),
                       font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
          margin = list(
            l = 50,  # marge gauche
            r = 50,  # marge droite
            b = 50,  # marge en bas
            t = 100  # marge en haut
          ),showlegend = FALSE,
          xaxis = list(  title = " ",tickformat = ",.0%",
                         tickvals = c(0,50,100),
                         ticktext = c(" "," "," ")),
          yaxis = list(title = " "),
          barmode = 'stack',
          paper_bgcolor = 'white',
          plot_bgcolor = "white",
          font = list(color = 'black')
        )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : SNE<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.05, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
      
      
      
      
      
    })
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    

    
    
    
    ## _____ A.3   PARC SOCIAL --> Attributions ______________ ####
    
    ####________ A.3.1   HISTORIQUE DE L'ATTRIBUTION _________________####
    
    ##_____________ A.3.1.1   graphe1Attr Attr_historique___________####
    
    
    Attr_historique_react <- reactive({
      req(input$epci)
      Attr_historique %>%
        filter(LIBEPCI == input$epci)
    })
    
    
    output$graphe1attr <- renderPlotly({

      data_prop <- Attr_historique_react() %>%
        group_by(MILLESIME) %>%
        mutate(Proportion = (Nombre_Attributions*100) / Attribution_totale) %>%
        ungroup()
      
      graphe1attr <- plot_ly() %>%
        add_bars(
        data = Attr_historique_react(), 
        x = ~MILLESIME, 
        y = ~Nombre_Attributions, 
        color = ~Type_Attribution, 
        colors =  colordem,
        hoverinfo = 'x+text',  # Information affichée au survol (x ( annee) et texte)
        hovertext = ~paste('Type d\'attribution:', Type_Attribution,"<br>Proportion : ",round(data_prop$Proportion, 0),"%" ,'<br>Nombre d\'attributions:', format(Nombre_Attributions, big.mark = " "))  # Texte affiché au survol
      ) %>%
        add_lines(
          data = (Attr_historique_react()%>%
            group_by(MILLESIME, LIBEPCI, Attribution_totale)%>%
            summarise(.groups = "drop")),
            
          x = ~MILLESIME,
          y = ~Attribution_totale,
          line = list(shape = 'spline', color = "black"),
          mode = 'lines+markers',
          marker = list(color = "black"),
          name =  "Attribution totale",
          text = ~format(Attribution_totale, big.mark = " "),
          textposition = 'top',
          textfont = list(color = 'black', family = "Arial Black", size = 11),
          showlegend = T,
          hoverinfo = 'skip'  # Ignorer l'affichage des étiquettes lors du survol
        ) %>%
        layout(
          title = list(text=paste0("Evolution des attributions de logements sociaux de ",min(Attr_historique_react()$MILLESIME) ," à ",max(Attr_historique_react()$MILLESIME)," selon le type",
                                   "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                       font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
          margin = list(
            l = 50,  # marge gauche
            r = 50,  # marge droite
            b = 50,  # marge en bas
            t = 100  # marge en haut
          ),
          xaxis = list(title = "Année"),
          yaxis = list(title = "Nombre attributions"),
          barmode = 'stack',
          paper_bgcolor = 'white',
          plot_bgcolor = "white",
          font = list(color = 'black'),
          legend = list(
            orientation = "h",   # Horizontal orientation
            bgcolor = ("rgba(0, 0, 0, 0)"),
            x = 0.5,             # Center the legend
            xanchor = "center",  # Align the center
            y = 1.12             # Position above the plot
            
          )
          
        )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : SNE<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.17, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
        
      
    })
    
    
    
    
    # ##_____________ A.3.1.2   graphe2Attr Attr_historique ___________####
    # 
    # 
    # output$graphe2attr <- renderPlotly({
    #   
    #   
    #   # Créer le graphique avec plot_ly
    #   graphe2attr <- plot_ly(
    #     Attr_historique_react() %>%
    #       group_by(MILLESIME) %>%
    #       mutate(Proportion = Nombre_Attributions / Attribution_totale) %>%
    #       ungroup(),
    #     x = ~MILLESIME, 
    #     y = ~Proportion, 
    #     color = ~Type_Attribution, 
    #     type = 'bar', 
    #     hoverinfo = 'x+text',  # Information affichée au survol (x ( annee) et texte)
    #     hovertext = ~paste('Type d\'attribution:', Type_Attribution, '<br>Proportion :', paste0(scales::percent(Proportion, accuracy = 1))),  # Texte affiché au survol
    #     
    #     text = ~paste0(scales::percent(Proportion, accuracy = 1)),
    #     textposition = 'inside',
    #     textfont = list(color = 'white'),
    #     colors = colorama) %>%
    #     layout(
    #       title = list(text=paste0("Evolution de la répartition des attributions de logements sociaux de ",min(Attr_historique_react()$MILLESIME)," à ",max(Attr_historique_react()$MILLESIME),"<br>selon le type",
    #                                "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
    #                    font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
    #       margin = list(
    #         l = 50,  # marge gauche
    #         r = 50,  # marge droite
    #         b = 50,  # marge en bas
    #         t = 100  # marge en haut
    #       ),
    #       xaxis = list(title = "Année"),
    #       yaxis = list(title = "Proportion", tickformat = ",.0%"),
    #       barmode = 'stack',
    #       paper_bgcolor = 'white',
    #       plot_bgcolor = "white" ,
    #       font = list(color = 'black'),
    #       legend = list(
    #         orientation = "h",   # Horizontal orientation
    #         bgcolor = ("rgba(0, 0, 0, 0)"),
    #         x = 0.5,             # Center the legend
    #         xanchor = "center",  # Align the center
    #         y = 1.06              # Position above the plot
    #         
    #       )
    #       
    #     )%>%
    #     # Ajout de l'annotation pour la source en bas à droite
    #     add_annotations(
    #       text = "Source : SNE<br>Traitement : ADIL30",
    #       xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
    #       x = 1, y = -0.16, showarrow = FALSE,  # Placement en bas à droite
    #       font = list(size = 9, color = 'gray')
    #     )
    #     
    #   
    #   
    #   
    # })
    # 
    # 
    
    
    ##_____________ A.3.1.3   graphe3Attr Attr_historique_pl_hlm ___________####
    
    Attr_pl_hlm_react <- reactive({
      req(input$epci)
      Attr_pl_hlm %>%
        filter(LIBEPCI == input$epci)%>%
        mutate(Caracteristiques = factor(Caracteristiques, levels = c("=< PLAI" ,"> PLAI et =< PLUS" ,"> PLUS et =<PLS", "> PLS"), ordered = T))
    })
    
    output$graphe2attr <- renderPlotly({
      
      data_prepared <- Attr_pl_hlm_react() %>%
        group_by(MILLESIME, Caracteristiques) %>%
        summarise(Attribution_totale = sum(Attribution_totale, na.rm = TRUE),
                  Mutation = sum(Mutation, na.rm = TRUE), 
                  Hors.mutation = sum(Hors.mutation, na.rm = TRUE)) %>%
        ungroup()
      
      # Créer le graphique funnel sans boucle
      graphe2attr <- plot_ly(
        data_prepared, 
        type = "bar", orientation = "h",
        x = ~format(data_prepared$Attribution_totale, big.mark = " "), 
        y = ~as.character(MILLESIME), 
        
        color = ~Caracteristiques, 
        colors = coloryou,  
        text = format(data_prepared$Attribution_totale, big.mark = " "),
        hoverinfo = 'text+y',
        hovertext = ~paste0( 'Plafond : ', Caracteristiques, "<br>Mutation : ", format(data_prepared$Mutation, big.mark = " "),"<br>Hors mutation : ", format(data_prepared$Hors.mutation, big.mark = " "))
        ,textposition = 'auto',
        textfont = list(color = 'white')
      ) %>%
        layout(
          title =list(text= paste0("Evolution de la répartition des attributions de logements sociaux ",min(data_prepared$MILLESIME)," à ",max(data_prepared$MILLESIME),"<br>selon les ressources (Plafond hlm) ",
                                   "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                      font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
          margin = list(
            l = 50,  # marge gauche
            r = 30,  # marge droite
            b = 25,  # marge en bas
            t = 110  # marge en haut
          ),
          barmode = "stack",
          yaxis = list(title = "Année"),
          xaxis = list(title = "", showticklabels = F),
          plot_bgcolor = "white",  # Couleur de fond du graphique
          paper_bgcolor = "white",# Couleur de fond du papier
          font = list(color = 'black'),
          legend = list(
            traceorder = "normal",
            orientation = "h",   # Horizontal orientation
            bgcolor = ("rgba(0, 0, 0, 0)"),
            x = 0.5,             # Center the legend
            xanchor = "center",  # Align the center
            y = 1.08              # Position above the plot
            
          )
          
        )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : SNE<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.05, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
        
    })   
    
    
    
    
    
    
    
    
    
    
    
    
    
    ####________ A.3.2   CARACTERISTIQUES DE L'ATTRIBUTION DE LOGEMENTS SOCIAUX ACTUELLE _________________####

    
    
    ##_____________ A.3.2.1   graphe4Attr Attr_age ___________####
    
    
    Attr_age_react <- reactive({
      req(input$epci)
      Attr_age %>%
        filter(LIBEPCI == input$epci)
    })
    
    
    output$graphe4attr <- renderPlotly({
      
      graphe4attr <- plot_ly(
        Attr_age_react() %>%
          group_by(MILLESIME) %>%
          mutate(Proportion = (Attribution_totale*100) / sum(Attribution_totale)) %>%
          ungroup(),
        x = ~Proportion, 
        y = ~paste0(Caracteristiques, " "), 
        color = ~Caracteristiques, 
        
        type = 'bar', 
        orientation = 'h',
        
        hoverinfo = 'text',  # Information affichée au survol (année et texte)
        hovertext = ~paste('Tranche d\'âge : ', Caracteristiques, '<br>Nombre d\'attributions :', format(Attribution_totale, big.mark = " ")),  # Texte affiché au survol
        text = ~paste0(   round(Proportion,0), "%"   ," (" ,(format((Mutation+Hors.mutation), big.mark = " ")), ")"),
        textposition = 'auto',
        textfont = list(color = 'black'),
        colors = "YlGn", showlegend = F
      ) %>%
        layout(
          title = list(text =paste0("Répartition des attributions de logements sociaux en ", max(Attr_age_react()$MILLESIME),"<br>selon la tranche d'âge des bénéficiaires",
                                    "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                       font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
          margin = list(
            l = 50,  # marge gauche
            r = 50,  # marge droite
            b = 50,  # marge en bas
            t = 100  # marge en haut
          ),
          xaxis = list(title = " ", tickformat = ",.0%",
                       tickvals = c(0,50,100),
                       ticktext = c(" "," "," ")),
          yaxis = list(title = " "),
          barmode = 'stack',
          paper_bgcolor = 'white',
          plot_bgcolor = "white",
          font = list(color = 'black'))%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : SNE<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.15, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
        
        
      
      
      
      
    })
    
    
    
    
    ##_____________ A.3.2.2   graphe5Attr Attr_log_actuel ___________####
    
    
    
    
    Attr_log_actuel_react <- reactive({
      req(input$epci)
      Attr_log_actuel %>%
        filter(LIBEPCI == input$epci)
    })
    
    
    
    
    output$graphe5attr <- renderPlotly({
      
      # Chargement des couleurs de la palette "YlGn"
      color_attr <- RColorBrewer::brewer.pal(n = length(unique(Attr_log_actuel_react()$Caracteristiques)), "Set2")
      

      graphe5attr <- Attr_log_actuel_react()%>%
        mutate("Percent" = round((Attribution_totale*100)/(sum(Attribution_totale)),0)) %>%
        plot_ly(
          labels = ~Caracteristiques,
          values = ~Attribution_totale,
          text = ~paste0(Percent,"%"),
          insidetextfont = list(color = 'black'),
          hoverinfo = 'text',
          hovertext= ~paste( Caracteristiques, '<br>Nombre d\'attributions :',format(Attribution_totale, big.mark = " "), '<br>', Percent,'%'),
          textinfo = 'text',
          
          insidetextfont = list(color = 'black'),
          sort = F,
          marker = list(colors = color_attr))
      graphe5attr <- graphe5attr %>% add_pie(hole = 0.5, domain = list(x = c(0, 1), y = c(0, 1))  )
      
      graphe5attr <- graphe5attr %>% layout(title = list(text=paste0("Répartition des attributions de logements sociaux en ",max(Attr_log_actuel_react()$MILLESIME),"<br>selon la situation de logement des bénéficiaires",
                                                                     "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                                                         font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)), showlegend = T, 
                                            margin = list(
                                              l = 50,  # marge gauche
                                              r = 50,  # marge droite
                                              b = 50,  # marge en bas
                                              t = 100  # marge en haut
                                            ),
                                          paper_bgcolor = 'white',  # couleur de fond du papier
                                          plot_bgcolor = 'white',
                                          font = list(color = 'black'),
                                          
                                          xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
                                          
                                          yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
                                          legend = list(
                                            orientation = "h",   # Horizontal orientation
                                            bgcolor = ("rgba(0, 0, 0, 0)"),
                                            x = 0.5,             # Center the legend
                                            xanchor = "center",  # Align the center
                                            y = -0.08              # Position above the plot
                                            
                                          )
                                          
      )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : SNE<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.4, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      graphe5attr
      
      
      
      
    })
    
    
    
    
    
    ##_____________ A.3.2.3   graphe6Attr Attr_anciennete ___________####
    
    
    
    Attr_anciennete_react <- reactive({
      req(input$epci)
      Attr_anciennete %>%
        filter(LIBEPCI == input$epci) %>%
        mutate(Caracteristiques = factor(Caracteristiques, levels = c("< 1 an" ,"1 à <  2 ans" ,"2 à < 3 ans" ,"3 ans ou +"), ordered = F))
    })
    
    
    
    
    output$graphe6attr <- renderPlotly({
      
      graphe6attr <- plot_ly(Attr_anciennete_react(), x = ~Caracteristiques, y = ~Attribution_totale,
                             color = ~Caracteristiques,
                             text= ~format(Attribution_totale, big.mark = " "),
                             textposition = 'auto',
                             textfont = list(color = 'black'),
                             hoverinfo = 'text',  # Information affichée au survol (année et texte)
                             hovertext = ~paste('Ancienneté de la demande : ', Caracteristiques, "<br>Mutation : ", format(Mutation, big.mark = " "),"<br>Hors mutation : ", format(Hors.mutation, big.mark = " ")),  # Texte affiché au survol
                             
                             colors = "YlGn", type = 'bar', showlegend = F) %>%
        layout(title = list(text=paste0("Répartitions des attributions de logements sociaux en ",max(Attr_anciennete_react()$MILLESIME),"<br>selon l'ancienneté des demandes",
                                        "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                            font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
               showlegend = TRUE,
               
               
               # textfont = list(color = 'white'),
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               xaxis = list(title = "Acienneté de la demande"),
               yaxis = list(title = "Nombre attributions",tickformat = ",."),
               plot_bgcolor = "white",  # Couleur de fond du graphique
               paper_bgcolor = "white",# Couleur de fond du papier
               font = list(color = 'black'))%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : SNE<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.16, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
        
      
      
      
    })
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    ##_____________ A.3.2.4   graphe7Attr Attr_typo ___________####
    
    
    
    Attr_typo_react <- reactive({
      req(input$epci)
      Attr_typo %>%
        filter(LIBEPCI == input$epci)
    })
    
    
    output$graphe7attr <- renderPlotly({
      data_prop <-  Attr_typo_react() %>%
        group_by(MILLESIME) %>%
        mutate(Proportion = (Attribution_totale*100) / sum(Attribution_totale)) %>%
        ungroup()
      graphe7attr <- plot_ly(
        Attr_typo_react(),
        x = ~Attribution_totale, 
        y = ~paste0(Caracteristiques, "  "),
        color = ~Caracteristiques, 
        type = 'bar', showlegend = F ,
        orientation = 'h',
        text=~paste0(   round(data_prop$Proportion,0), "%"   ," (" ,(format((Mutation+Hors.mutation), big.mark = " ")), ")"),
        hoverinfo = 'text',  # Information affichée au survol (année et texte)
        hovertext = ~paste('Typologie : ', Caracteristiques, '<br>Mutation :', format(Mutation, big.mark = " "), '<br>Hors mutation :',format(Hors.mutation, big.mark = " ")),  # Texte affiché au survol
        # text = ~paste0(scales::percent(Proportion, accuracy = 1)),
        textposition = 'auto',
        textfont = list(color = 'black'),
        colors = "YlGn"
        # colors = "RdBu"
      ) %>%
        layout(
          title = list(text = paste("Répartition des attributions de logements sociaux en ", max(Attr_typo_react()$MILLESIME),"<br>selon la typologie attribuée",
                                    "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                       font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
          margin = list(
            l = 50,  # marge gauche
            r = 50,  # marge droite
            b = 50,  # marge en bas
            t = 100  # marge en haut
          ),
          xaxis = list(  title = " ",tickformat = ",.0%",
                         tickvals = c(0,50,100),
                         ticktext = c(" "," "," ")),
          yaxis = list(title = " "),
          barmode = 'stack',
          paper_bgcolor = 'white',
          plot_bgcolor = "white",
          font = list(color = 'black')
        )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : SNE<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = 0.06, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
      
      
      
      
      
    })
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    ## _____ A.4   PARC SOCIAL --> Tension ______________ ####
    
    ####________ A.4.1   HISTORIQUE DE LA TENSION SOCIALE _________________####
    
    ##_____________ A.4.1.1   graphe1tens Tens_historique___________####
    
    
    
    
    Tens_histo_react <- reactive({
      req(input$epci)
      Tens_histo %>%
        filter(LIBEPCI == input$epci)
      
    })
    
    
    

    output$graphe1tens <- renderPlotly ({

      graphe1tens <- plot_ly()%>%
        add_bars(
          data = Tens_histo_react(),
          x= ~as.factor(MILLESIME), y =~Nombre_total, color = ~Objet, 
          colors = colortens,
          text=~Nombre_total,
          textposition = "auto",
          textfont = list(color = 'white'),
          hoverinfo= 'x+text',
          hovertext = ~ paste0("Nombre ",Objet, "s : ", format(Nombre_total, big.mark = " "))
        ) %>%
        add_lines(
          data = (Tens_histo_react()%>%
            group_by(MILLESIME, LIBEPCI, Tension)%>%
            summarise(.groups = "drop")),
          x=~MILLESIME,y=~Tension,
          mode = 'lines+markers',
          line = list(shape = 'spline', color = "black"), 
          text = ~Tension,
          marker = list(color = "black"),
          textposition = 'top',
          name = "Tension",
          textfont = list(color = 'black',  family = 'Arial Black'),
          hoverinfo= 'x+text',
          hovertext = ~ paste("Demandes pour une attribution :", Tension),
          yaxis = "y2"
          ) %>%
        layout(
          title = list(text=paste0("Evolution de la tension sociale de ", min(Tens_histo_react()$MILLESIME), " à ", max(Tens_histo_react()$MILLESIME),
                                   "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>" ),
                       font = list(size = 15, color = 'black', bold = TRUE,  family = 'Arial Black')),
          margin = list(
            l = 50,  # marge gauche
            r = 50,  # marge droite
            b = 50,  # marge en bas
            t = 100  # marge en haut
          ),
          xaxis = list(title = "Année"),
          yaxis = list(title = "Nombre de demandes<br>et d'attrinutions", tickformat = ".,"),
          yaxis2 = list(
            title = "Tension",
            overlaying = "y",  # Superposition sur l'axe Y principal
            side = "right"  # Placement à droite
          ),
          # barmode = 'stack',
          paper_bgcolor = 'white',
          plot_bgcolor = "white",
          font = list(color = 'black'),
          legend = list(
            orientation = "h",   # Horizontal orientation
            bgcolor = ("rgba(0, 0, 0, 0)"),
            x = 0.5,             # Center the legend
            xanchor = "center",  # Align the center
            y = 1.1              # Position above the plot
            
          )
          
        )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : SNE<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.165, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
        

      
    })
    
        
    
    
    ##_____________ A.4.1.2   graphe2tens Tens_delai_historique___________####
    
    

    Tens_delai_histo_react <- reactive({
      req(input$epci)
      Tens_delai_histo %>%
        filter(LIBEPCI == input$epci)

    })


    
    
    output$graphe2tens <- renderPlotly ({
      
      graphe2tens <- Tens_delai_histo_react() %>%
        plot_ly(
          x=~as.factor(MILLESIME),y=~Duree, type = 'scatter',
          mode = 'lines+markers',
          line = list(shape = 'spline'),
          color = ~Type, text = ~Duree, textposition = "top",
          colors = colorama,
          textfont = list(color = 'black',family = 'Arial Black', bold = TRUE),
          hoverinfo= 'x+text',
          hovertext = ~ paste0(Type, " (en mois) : ",Duree)
          )%>%
        layout(
          title = list(
            text = paste0("Evolution du délai moyen d'attente de la demande en cours<br>et évolution du délai moyen d'attribution (en mois) de ", min(Tens_delai_histo_react()$MILLESIME), " à ", max(Tens_delai_histo_react()$MILLESIME),
                          "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
            font = list(size = 15, color = 'black', family = 'Arial Black', bold = TRUE)
          ),
          margin = list(
            l = 50,  # marge gauche
            r = 50,  # marge droite
            b = 50,  # marge en bas
            t = 100  # marge en haut pour laisser plus de place au titre
          ),
          xaxis = list(title = "Année"),
          yaxis = list(title = "Nombres de mois"),
          paper_bgcolor = 'white',
          plot_bgcolor = "white",
          font = list(color = 'black'),
          legend = list(
            orientation = "h",
            bgcolor = "rgba(0, 0, 0, 0)",
            x = 0.5,              
            xanchor = "center",   
            y = -0.28              # Position légèrement plus basse pour dégager le titre
          )
        )%>%
        add_annotations(
          text = "Source : SNE<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.6, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
        
      
      
    })
    
    
    
    
    
    
    
    
    ##_____________ A.4.1.3   graphe3tens Taux_mobi_historique___________####
    
    
    taux_mob_react <- reactive({
      req(input$epci)
      taux_mob %>%
        filter(LIBEPCI == input$epci)
      
    })
    
    
    output$graphe3tens <- renderPlotly ({
      
      graphe3tens <- taux_mob_react() %>%
        plot_ly(
          x=~as.factor(MILLESIME),y=~tx_mob, type = 'scatter',
          mode = 'lines+markers',
          line = list(shape = 'spline', color= "#D658A6"),
          color =  "Tension",
          text = ~tx_mob,
          textposition = 'top',
          textfont = list(color = '#621143',family = 'Arial Black',bold = TRUE),
          marker = list(color = "purple"),
          hoverinfo= 'x+text',
          hovertext = ~ paste0("Taux de mobilité : ",tx_mob,"%", "<br>Nombre d'emménagments : ", format(mob, big.mark = " "))
        )%>%
        
        layout(
          title = list(text=paste0("Evolution du taux de mobilité de ", min(taux_mob_react()$MILLESIME), " à ", max(taux_mob_react()$MILLESIME) ,
                                   "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                       font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
          margin = list(
            l = 50,  # marge gauche
            r = 50,  # marge droite
            b = 50,  # marge en bas
            t = 100  # marge en haut
          ),
          xaxis = list(title = "Année"),
          yaxis = list(title = "Taux de mobilité (%)"),
          paper_bgcolor = 'white',
          plot_bgcolor = "white",
          font = list(color = 'black'))%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : RPLS<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.17, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
        
      
      
    })
    
    
    
    
    
    
    
    
    
    
    ####________ A.2.2   CARACTERISTIQUES DE LA TENSION SOCIALE ACTUELLE _________________####
    
    
    ##_____________ A.4.1.2   graphe4tens Tens_typo___________####
    
    
    
    
    
    Tens_typo_react <- reactive({
      req(input$epci)
      Tens_typo %>%
        filter(LIBEPCI == input$epci)
    })



    output$graphe4tens <- renderPlotly({
      graphe4tens <- plot_ly(Tens_typo_react(), x = ~Tension, y = ~paste0(Caracteristiques, " "), type = 'bar',orientation = "h",
                             color = ~Caracteristiques, colors = "YlOrBr",
                             # colors = colorabd,
                             hoverinfo = 'text',  # Information affichée au survol (année et texte)
                             hovertext = ~paste0('Typologie : ', Caracteristiques, '<br>Demandes pour une attribution : ', Tension, '<br>Nombre de demandes : ', Demande, '<br>Nombre d\'attributions : ', Attribution),  # Texte affiché au survol
                             text = ~format(Tension, big.mark = " "),
                             textposition = 'auto',
                             insidetextfont = list(color = 'black'),outsidetextfont = list(color = 'black')) %>%
        layout(title = list(text=paste0("Tension en " ,max(Tens_typo_react()$MILLESIME) ," selon la typologie des logements",
                                        "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                            font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               xaxis = list(title = 'Tension'),
               yaxis = list(title = 'Typologie de logements'),
               plot_bgcolor = 'white', # Couleur de fond du plot
               paper_bgcolor = 'white', # Couleur de fond du papier
               font = list(color = 'black'),
               legend = list(
                 orientation = "h",   # Horizontal orientation
                 bgcolor = ("rgba(0, 0, 0, 0)"),
                 x = 0.5,             # Center the legend
                 xanchor = "center",  # Align the center
                 y = 1.12             # Position above the plot
                 
               )
               
        )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : SNE<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.20, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )

    })


    
    
    
    
    
    
    
    ##_____________ A.4.1.2   graphe5tens Tens_pl_hlm___________####

    
    Tens_pl_hlm_react <- reactive({
      req(input$epci)
      Tens_pl_hlm %>%
        filter(LIBEPCI == input$epci)%>%
        mutate(Caracteristiques = factor(Caracteristiques,
                                         levels = c("=< PLAI" ,"> PLAI et =< PLUS" ,"> PLUS et =<PLS",
                                                    "> PLS"), ordered = T))
    })

    # 
    # 
    # output$graphe5tens <- renderPlotly({
    #   graphe5tens <- plot_ly(Tens_pl_hlm_react()%>%
    #                            filter(Caracteristiques != "Non renseigné"), 
    #                          x = ~Caracteristiques,
    #                          y = ~Tension, 
    #                          type = 'bar',
    #                          color = ~Caracteristiques, 
    #                          colors = coloryou,
    #                          # colors = "RdPu",
    #                          hoverinfo = 'text',  # Information affichée au survol (année et texte)
    #                          hovertext = ~paste('Financement : ', Caracteristiques,'<br>Nombre de demandes :', Demande, '<br>Nombre d\'attributions :', Attribution),  # Texte affiché au survol
    #                          text = ~format(Tension, big.mark = " "),
    #                          textposition = 'auto', showlegend = F,
    #                          textfont = list(color = 'white')) %>%
    #     layout(title = list(text=paste0("Tension en " ,max(Tens_pl_hlm_react()$MILLESIME) ," selon le financement",
    #                                "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
    #                         font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
    #            margin = list(
    #              l = 50,  # marge gauche
    #              r = 50,  # marge droite
    #              b = 50,  # marge en bas
    #              t = 100  # marge en haut
    #            ),
    #            xaxis = list(title = 'Type de financement'),
    #            yaxis = list(title = 'Tension',tickformat = ".,"),
    #            plot_bgcolor = 'white', # Couleur de fond du plot
    #            paper_bgcolor = 'white', # Couleur de fond du papier
    #            font = list(color = 'black'))%>%
    #     # Ajout de l'annotation pour la source en bas à droite
    #     add_annotations(
    #       text = "Source : SNE<br>Traitement : ADIL30",
    #       xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
    #       x = 1, y = -0.20, showarrow = FALSE,  # Placement en bas à droite
    #       font = list(size = 9, color = 'gray')
    #     )
    # 
    # })
    # 
    # 
    # 
    # 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    #               _ _ _ _ _ _ _ _ __ _ _ __ _ _  Version avec les points et les barres groupées _ _ _ _ _ _ _ _ __ _ _ __ _ _ 
    #               _ _ _ _ _ _ _ _ __ _ _ __ _ _  (Nécéssite un "pivo_longer" dans import.R) _ _ _ _ _ _ _ _ __ _ _ __ _ _ 
    
    output$graphe5tens <- renderPlotly({
      graphe5tens <- plot_ly()%>%
        add_bars( data = (Tens_pl_hlm_react()%>%
                            filter(Caracteristiques != "Non renseigné")),
                  x = ~Caracteristiques,
                  y = ~NOMBRE,
                  # type = 'bar',
                  color = ~TYPE,
                  colors = coloryou,
                  # colors = "RdPu",
                  hoverinfo = 'text',  # Information affichée au survol (année et texte)
                  hovertext = ~paste0('Plafond de ressources : ', Caracteristiques,'<br>', TYPE,"s : " , NOMBRE),  # Texte affiché au survol
                  # text = ~format(Tension, big.mark = " "),
                  textposition = 'auto', showlegend = T,
                  textfont = list(color = 'white')) %>%
        add_trace(
          data = (Tens_pl_hlm_react()%>%
                    filter(Caracteristiques != "Non renseigné")%>%
                    group_by(MILLESIME, LIBEPCI, Caracteristiques,Tension)%>%
                    summarise(.groups = "drop")),
          x=~Caracteristiques,y=~Tension,
          type = 'scatter',
          # line = list(shape = 'spline', color = "black"),
          text = ~Tension,
          marker = list(color = "black"),
          textposition = 'top',
          name = "Tension",
          textfont = list(color = 'black',  family = 'Arial Black'),
          hoverinfo= 'x+text',
          hovertext = ~ paste("Demandes pour une attribution :", Tension),
          yaxis = "y2"
        ) %>%
        layout(title = list(text=paste0("Tension en " ,max(Tens_pl_hlm_react()$MILLESIME) ," selon le financement",
                                        "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                            font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               xaxis = list(title = 'Type de financement'),
               yaxis = list(title = 'Nombre',tickformat = ".,"),
               yaxis2 = list(
                 title = "Tension",
                 overlaying = "y",  # Superposition sur l'axe Y principal
                 side = "right"  # Placement à droite
               ),
               # barmode = "stack",
               plot_bgcolor = 'white', # Couleur de fond du plot
               paper_bgcolor = 'white', # Couleur de fond du papier
               font = list(color = 'black'),
               legend = list(
                 orientation = "h",   # Horizontal orientation
                 bgcolor = ("rgba(0, 0, 0, 0)"),
                 x = 0.5,             # Center the legend
                 xanchor = "center",  # Align the center
                 y = 1.1              # Position above the plot
                 
               )
               )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : SNE<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.20, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )

    })
    
    
    
    
    
    
    
  
    
    
    
    
    #               _ _ _ _ _ _ _ _ __ _ _ __ _ _  Version avec la demande en Y  _ _ _ _ _ _ _ _ __ _ _ __ _ _ 
    
    # 
    # output$graphe5tens <- renderPlotly({
    #   graphe5tens <- plot_ly(
    #     Tens_pl_hlm_react() %>%
    #       filter(Caracteristiques != "Non renseigné"),   # Conversion en numérique de Tension
    #     x = ~Caracteristiques, 
    #     y = ~Demande, color = ~Demande, colors = "PuOr",
    #      type = 'scatter', 
    #     mode = 'markers',
    #     marker = list(
    #       size =~Tension,
    #       sizeref = 0.5,
    #       sizemode = 'diameter'  # Taille basée sur le diamètre des bulles
    #     ),
    #     hoverinfo = "text",
    #     hovertext =~paste('Financement : ', Caracteristiques, '<br>Tension :', 
    #                       Tension,'<br>Nombre de demandes :', Demande, '<br>Nombre d\'attributions :', Attribution) 
    #     )%>%
    #           layout(title = list(text=paste0("Tension en " ,max(Tens_pl_hlm_react()$MILLESIME) ," selon le financement"),
    #                               font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
    #                  margin = list(
    #                    l = 50,  # marge gauche
    #                    r = 50,  # marge droite
    #                    b = 50,  # marge en bas
    #                    t = 100  # marge en haut
    #                  ),
    #                  xaxis = list(title = 'Type de financement'),
    #                  yaxis = list(title = 'Nombre d\'attributions'),
    #                  plot_bgcolor = 'white', # Couleur de fond du plot
    #                  paper_bgcolor = 'white', # Couleur de fond du papier
    #                  font = list(color = 'black'))%>%
    #           # Ajout de l'annotation pour la source en bas à droite
    #           add_annotations(
    #             text = "Source : SNE,<br>Traitement : ADIL30",
    #             xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
    #             x = 1, y = -0.20, showarrow = FALSE,  # Placement en bas à droite
    #             font = list(size = 9, color = 'gray')
    #           )
    # 
    #   
    #   
    #       })

        
        
        
        
        
 
    ## ___  B. CHIFFRES CLEF ! (DEMOGRAPHIE) ####
    ## _____ B.1   DEMOGRAPHIE --> Population ______________ ####
    
    ####________ B.1.1   HISTORIQUES DE LA POPU _________________####
    
    ##_____________ B.1.1.1   graphe1pop pop_historique___________####  
    
    

    pop_histo_genre_react <- reactive({
      req(input$epci)
      pop_histo_genre %>%
        filter(LIBEPCI == input$epci)
    })

    # the plot
    output$graphe1pop <- renderPlotly({
      
      y_min <- min(pop_histo_genre_react()$POP, na.rm = TRUE)
      y_max <- max(pop_histo_genre_react()$POP, na.rm = TRUE)
      
      # Ajouter un léger buffer autour des valeurs min et max pour ne pas coller aux bords
      buffer <- (y_max - y_min) * 2.85  # 5% de buffer
      
      graphe1pop <- plot_ly(pop_histo_genre_react(), x = ~as.factor(MILLESIME), y = ~POP, type = 'bar',
                            # color = ~Caracteristiques, 
                            marker=list(color = "#cf4f3d"),
                            hoverinfo = 'x+text',  # Information affichée au survol (année et texte)
                            hovertext = ~paste0('Hommes : ', format(Homme, big.mark=" "),'<br>Femmes : ', format(Femme, big.mark=" ") ),  # Texte affiché au survol
                            text = ~format(POP, big.mark = " "),
                            textposition = 'inside',
                            textfont = list(color = 'white')) 
        config(graphe1pop, modeBarButtonsToRemove = c('zoom2d','pan2d',"Lasso Select")) %>%
        layout(title = list(text = paste0('Evolution de la population municipale de ',min(pop_histo_genre_react()$MILLESIME)," à ", max(pop_histo_genre_react()$MILLESIME),
                                          "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                            font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE),xref = "paper"),
                            
              
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               xaxis = list(title = 'Année'),
               yaxis = list(title = 'Effectif',tickformat = ",.",
                            range = c(y_min - buffer, y_max + (buffer/3))
                            ),
               plot_bgcolor = 'white', # Couleur de fond du plot
               paper_bgcolor = 'white', # Couleur de fond du papier
               font = list(color = 'black'))%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : INSEE<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.17, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
    })
    
    
    
    
    
    
    # ##_____________ B.1.1.2   graphe2pop pop_historique_sexe___________### 
    # 
    # 
    # pop_histo_genre_react <- reactive({
    #   req(input$epci)
    #   pop_histo_genre %>%
    #     filter(LIBEPCI == input$epci)
    # })
    # 
    # 
    # output$graphe2pop <- renderPlotly({
    #   
    #   y_min <- min(pop_histo_genre_react()$EFFECTIF, na.rm = TRUE)
    #   y_max <- max(pop_histo_genre_react()$EFFECTIF, na.rm = TRUE)
    #   
    #   # Ajouter un léger buffer autour des valeurs min et max pour ne pas coller aux bords
    #   buffer <- (y_max - y_min) * 2  # 5% de buffer
    #   
    #   graphe2pop <- plot_ly(pop_histo_genre_react(), x = ~as.factor(MILLESIME),
    #                          y = ~EFFECTIF, color = ~GENRE,colors = "Dark2",
    #                          type = 'scatter', mode = 'lines+markers', line = list(shape = 'spline'),hoverinfo = "x+text",
    #                          hovertext = ~paste("Genre :", GENRE, "<br>Effectif :", format(EFFECTIF, big.mark = " "))
    #   ) %>%
    #     layout(title = list( text = paste0("Evolution du nombre d'habitants de ",min(pop_histo_genre_react()$MILLESIME), " à ", max(pop_histo_genre_react()$MILLESIME), " selon le genre"
    #                                        ,
    #                                        "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
    #                          font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
    #            legend = list(
    #              orientation = "h",   # Horizontal orientation
    #              bgcolor = ("rgba(0, 0, 0, 0)"),
    #              x = 0.5,             # Center the legend
    #              xanchor = "center",  # Align the center
    #              y = 1.1              # Position above the plot
    #            ),
    #            showlegend = TRUE,
    #            margin = list(
    #              l = 50,  # marge gauche
    #              r = 50,  # marge droite
    #              b = 50,  # marge en bas
    #              t = 100  # marge en haut
    #            ),
    #            xaxis = list(title = "Année"),
    #            yaxis = list(
    #              title = "Effectif",tickformat = ".",
    #              range = c(y_min - buffer, y_max + (buffer/3) )),
    #            plot_bgcolor = "white",  # Couleur de fond du graphique
    #            paper_bgcolor = "white",  # Couleur de fond du papier
    #            font = list(color = 'black')
    # 
    #     )%>%
    #     # Ajout de l'annotation pour la source en bas à droite
    #     add_annotations(
    #       text = "Source : INSEE<br>Traitement : ADIL30",
    #       xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
    #       x = 1, y = -0.2, showarrow = FALSE,  # Placement en bas à droite
    #       font = list(size = 9, color = 'gray')
    #     )
    # 
    # 
    # })

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    


    
    
    
    
    
    
    ##_____________ B.1.1.2   graphe2pop pop_soldes ___________####  
    


    pop_soldes_react <- reactive({
      req(input$epci)
      pop_soldes %>%
        filter(LIBEPCI == input$epci)
    })


    output$graphe2pop <- renderPlotly({
      
      
      # Calcul du total par année
      data_total <- pop_soldes_react() %>%
        group_by(MILLESIME) %>%
        summarise(Total = sum(SOLDE, na.rm = TRUE)) %>%
        ungroup()

      
      graphe2pop <- plot_ly() %>%
        # Barres empilées
        add_bars(
          data = pop_soldes_react(),
          x = ~as.factor(MILLESIME), 
          y = ~SOLDE, 
          color = ~TYPE, 
          colors = colorama, 
          hoverinfo = "x+text",
          hovertext = ~paste ("Type de solde : ", TYPE, "<br>Solde : ", format(SOLDE, big.mark = " "))
        ) %>%
        # Ligne pour le volume total
        add_lines(
          data = data_total,
          x = ~as.factor(MILLESIME),
          y = ~Total,line = list(shape = 'spline', color = "black"),mode = 'lines+markers', text =~format(Total, big.mark=" "), textposition = "top",
          # #721561
          textfont = list(color = 'black',bold = TRUE,  family = 'Arial Black'),
          marker = list(color = "black"), 
          name = "Solde démographique ",  # Légende de la courbe
          # textfont = list(color = 'black',bold = TRUE,  family = 'Arial Black'),  # Style de la ligne
          hoverinfo = "x+text",
          hovertext = ~paste("Variation de la population : ", format(Total, big.mark = " "))
        ) %>%

        layout(title = list (text= paste0("Dynamique démographique de ",min(pop_soldes_react()$MILLESIME), " à ", max(pop_soldes_react()$MILLESIME),
                                          "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"), 
                             font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)) ,
               barmode = "relative",
               showlegend = TRUE, 
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               xaxis = list(title = "Année"),
               yaxis = list(title = "Solde", tickformat = ".,0"),
             
               plot_bgcolor = "white",  # Couleur de fond du graphique
               paper_bgcolor = "white", # Couleur de fond du papier
               font = list(color = 'black'),
               legend = list(
                 orientation = "h",   # Légende horizontale
                 bgcolor = ("rgba(0, 0, 0, 0)"),
                 x = 0.5,             # Centrer la légende
                 xanchor = "center",  # Alignement centré
                 y = 1.12             # Position au-dessus du graphique
               )
        )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : INSEE<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.19, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )

    })
    
    
    
    
    
    
    
    
    
    
    
    
    ##_____________ B.1.1.3   graphe3pop pop_men ___________####  
    
    
    
    pop_dess_react <- reactive({
      req(input$epci)
      pop_dess %>%
        filter(LIBEPCI == input$epci)
    })
    
    
    output$graphe3pop <- renderPlotly({
      graphe3pop <- plot_ly(pop_dess_react(), x = ~MILLESIME, y = ~RP, type="bar", text =~format(RP, big.mark=" "), textposition = "top",
                            marker=list(color = "#006245"),
                            hoverinfo = 'x+text',  # Information affichée au survol (année et texte)
                            hovertext = ~paste0('Taille moyenne des ménages : ', TAILLE_MOY,"<br>Nombre de ménages : ", format(RP, big.mark = " ") ),  # Texte affiché au survol
                            # text = ~format(TAILLE_MOY, big.mark = " "),
                            # textposition = 'inside',
                            textfont = list(color = 'white')) %>%
        layout(title = list(text=  paste0('Evolution des ménages de ',min(pop_dess_react()$MILLESIME), " à ",max(pop_dess_react()$MILLESIME),
                                          "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                            font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               xaxis = list(title = 'Année'),
               yaxis = list(title = 'Nombre', range=c(  (min(pop_dess_react()$RP))-( min(pop_dess_react()$RP)/9)    , max(pop_dess_react()$RP)), tickformat = ",."
               ),
               plot_bgcolor = 'white', # Couleur de fond du plot
               paper_bgcolor = 'white', # Couleur de fond du papier
               font = list(color = 'black'))%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : INSEE<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.18, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
    })
    
    
    
    
    
    
    
    
    
    
    
    
    
    ##_____________ B.1.1.4   graphe7pop pop_dess ___________####  
    
    
    
    pop_dess_react <- reactive({
      req(input$epci)
      pop_dess %>%
        filter(LIBEPCI == input$epci)
    })
    
    
    output$graphe7pop <- renderPlotly({
      graphe7pop <- plot_ly(pop_dess_react(), x = ~MILLESIME, y = ~TAILLE_MOY, type = 'bar',
                            # color = ~Caracteristiques, 
                            marker=list(color = "#508072"),
                            hoverinfo = 'x+text',  # Information affichée au survol (année et texte)
                            hovertext = ~paste0('Taille moyenne des ménages : ', TAILLE_MOY,"<br>Nombre de ménages : ", format(RP, big.mark = " ") ),  # Texte affiché au survol
                            text = ~format(TAILLE_MOY, big.mark = " "),
                            textposition = 'inside',
                            textfont = list(color = 'white')) %>%
        layout(title = list(text=  paste0('Evolution de la taille moyenne des ménages de ',min(pop_dess_react()$MILLESIME), " à ",max(pop_dess_react()$MILLESIME),
                                          "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                            font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               xaxis = list(title = 'Année'),
               yaxis = list(title = 'Taille moyenne',range = c(1.9, max(pop_dess_react()$TAILLE_MOY))
               ),
               plot_bgcolor = 'white', # Couleur de fond du plot
               paper_bgcolor = 'white', # Couleur de fond du papier
               font = list(color = 'black'))%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : INSEE<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.18, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
    })
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    ##_____________ B.1.1.5   graphe4pop pop_age (pyr)___________####  
    
    
    pop_genre_py_react <- reactive({
      req(input$epci)
      pop_genre_py %>%
        filter(LIBEPCI == input$epci)
    })
    
    
    
    
    output$graphe4pop <- renderPlotly({
      
      graphe4pop <- plot_ly() %>%
        # Barre pour les hommes (valeurs négatives)
        add_bars(
          x = -(pop_genre_py_react()%>%
                  filter(MILLESIME == max(MILLESIME)))$Homme,
          y = (pop_genre_py_react()%>%
                 filter(MILLESIME == max(MILLESIME)))$tranche_age,
          name = paste0("Hommes"),
          hoverinfo = 'y+text',
          
          hovertext =~paste0("Nombre d'hommes  : ",format((pop_genre_py_react()%>%
                                                             filter(MILLESIME == max(MILLESIME)))$Homme,big.mark = " "), 
                             "<br>Variation de ", ifelse(( (pop_genre_py_react()%>%
                                                              filter(MILLESIME == max(MILLESIME)))$Homme-(pop_genre_py_react()%>%
                                                                                                            filter(MILLESIME == min(MILLESIME)))$Homme ) > 0, "+", ""),  # Ajoute "+" si positif, sinon rien
                             format(( (pop_genre_py_react()%>%
                                         filter(MILLESIME == max(MILLESIME)))$Homme-(pop_genre_py_react()%>%
                                                                                       filter(MILLESIME == min(MILLESIME)))$Homme ), big.mark = " "), " par rapport à " , (pop_genre_py_react()%>%
                                                                                                                                                                             filter(MILLESIME == min(MILLESIME)))$MILLESIME  ) ,
          orientation = 'h',  # 'h' pour une barre horizontale 
          marker = list(color = '#d31453',opacity = -0.2)
        ) %>%
        # Barre pour les femmes (valeurs positives)
        add_bars(
          x = (pop_genre_py_react()%>%
                 filter(MILLESIME == max(MILLESIME)))$Femme,
          y = (pop_genre_py_react()%>%
                 filter(MILLESIME == max(MILLESIME)))$tranche_age,
          name = paste0("Femmes"),
          orientation = 'h',  # 'h' pour une barre horizontale
          hoverinfo = 'y+text',
          hovertext =~paste0("Nombre de femmes  : ",format((pop_genre_py_react()%>%
                                                              filter(MILLESIME == max(MILLESIME)))$Femme,big.mark = " "), 
                             "<br>Variation de ",ifelse(( (pop_genre_py_react()%>%
                                                                        filter(MILLESIME == max(MILLESIME)))$Femme-(pop_genre_py_react()%>%
                                                                                                                      filter(MILLESIME == min(MILLESIME)))$Femme ) > 0, "+", ""),  # Ajoute "+" si positif, sinon rien
                             format(( (pop_genre_py_react()%>%
                                         filter(MILLESIME == max(MILLESIME)))$Femme-(pop_genre_py_react()%>%
                                                                                       filter(MILLESIME == min(MILLESIME)))$Femme ), big.mark = " "), " par rapport à " , (pop_genre_py_react()%>%
                                                                                                                                                                                                   filter(MILLESIME == min(MILLESIME)))$MILLESIME  ) ,
          
          
          

          
          
          
          
          
          
          
          marker = list(color = '#508072',opacity = -0.2)
        )%>%
        #   # barres pour les hommes pendant l'année antérieure
        #   add_bars(
        #     x = -(pop_genre_py_react()%>%
        #             filter(MILLESIME == min(MILLESIME)))$Homme,
        #     y = as.factor((pop_genre_py_react()%>%
        #            filter(MILLESIME == max(MILLESIME)))$tranche_age),
        #     name =~paste0('Hommes en ',(pop_genre_py_react()%>%
        #                                   filter(MILLESIME == min(MILLESIME)))$MILLESIME ),
        #     orientation = 'h',
        #     hoverinfo = 'y+text',
        #     hovertext =~paste0("Hommes en " ,(pop_genre_py_react()%>%
        #                                           filter(MILLESIME == min(MILLESIME)))$MILLESIME ," : ",format((pop_genre_py_react()%>%
        #                                                                                                            filter(MILLESIME == min(MILLESIME)))$Homme,big.mark = " ") ) ,
        #     marker = list(color = 'white', opacity = 0.3, line = list(color = "grey", width = 2, dash = "dot")),
        #     showlegend = TRUE
        #   )
        # %>%
        #   # Femmes 2013
        #   add_bars(
        #     x = (pop_genre_py_react()%>%
        #            filter(MILLESIME == min(MILLESIME)))$Femme,
        #     y = as.factor((pop_genre_py_react()%>%
        #            filter(MILLESIME == min(MILLESIME)))$tranche_age),
        #     name =~paste0('Femmes en ',(pop_genre_py_react()%>%
        #                                   filter(MILLESIME == min(MILLESIME)))$MILLESIME ),
        #     orientation = 'h',
        #     hoverinfo = 'y+text',
        #     hovertext =~paste0("Femmes en " ,(pop_genre_py_react()%>%
        #                                          filter(MILLESIME == min(MILLESIME)))$MILLESIME ," : ",format((pop_genre_py_react()%>%
        #                                                       filter(MILLESIME == min(MILLESIME)))$Femme,big.mark = " ") ) ,
        #     marker = list(color = 'white',dash = "dot", opacity = 0.2, line = list(color= "grey", width = "2", dash = "dot")),
        #     showlegend = TRUE
        #   )
        # %>%
        layout(
          title = list (text = paste0("Pyramide des âges de la population en ", max(pop_genre_py_react()$MILLESIME),
                                      "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                        font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
          legend = list(
            orientation = "h",   # Horizontal orientation
            x = 0.48,  
            bgcolor = ("rgba(0, 0, 0, 0)"),# Center the legend
            xanchor = "center",  # Align the center
            y = 1.1              # Position above the plot
          ),
          margin = list(
            l = 50,  # marge gauche
            r = 50,  # marge droite
            b = 50,  # marge en bas
            t = 90  # marge en haut
          ),
          barmode = 'overlay',  # Afficher les barres des hommes et des femmes en miroir
          xaxis = list(title = "Effectif",tickformat = ",."
                       ,
                       tickvals = c(-max(pop_genre_py_react()$Homme), (-max(pop_genre_py_react()$Homme))/2,0,(max(pop_genre_py_react()$Femme))/2, max(pop_genre_py_react()$Femme)),
                       ticktext = c(max(pop_genre_py_react()$Homme), (max(pop_genre_py_react()$Homme))/2,0,(max(pop_genre_py_react()$Femme))/2, max(pop_genre_py_react()$Femme))),
          yaxis = list(title = "Tranche d'âge"),
          bargap = 0.1,
          plot_bgcolor = "white",
          paper_bgcolor = "white"
        )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : INSEE<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.16, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
      
      
    })
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    ####________ B.1.2   CARACTERISTIQUES DE LA POPU ACTUELLE _________________####
    
    ##_____________ B.1.2.1   graphe5pop pop_carac_men  ___________####
    
    
    
    pop_type_men_react <- reactive({
      req(input$epci)
      pop_type_men %>%
        filter(LIBEPCI == input$epci)%>%
        mutate(pourcent = (EFFECTIF*100)/(sum(EFFECTIF)))
    })
    
    output$graphe5pop <- renderPlotly({
      

    graohe5pop <- plot_ly(pop_type_men_react(), x = ~pourcent, y = ~CATEGORIE, type = 'bar',orientation = "h",
                           color = ~CATEGORIE, colors = colorsal,
                           hoverinfo = 'text',  # Information affichée au survol (année et texte)
                           hovertext = ~paste('Catégorie : ', CATEGORIE, '<br>Nombre de ménages :', format(EFFECTIF, big.mark = " ")),  # Texte affiché au survol
                           text = ~paste0(round(pourcent,1),"%"),
                           textposition = 'auto',
                           outsidetextfont = list(color = 'black'),insidetextfont = list(color = 'white'),
                          showlegend = F) %>%
      layout(title =list (text= paste0('Composition des ménages en ',max(pop_type_men_react()$MILLESIME),
                                       "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                           font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
             margin = list(
               l = 50,  # marge gauche
               r = 50,  # marge droite
               b = 50,  # marge en bas
               t = 100  # marge en haut
             ),
             xaxis = list(title = " ",tickformat = ",.0%",
                          tickvals = c(min(pop_type_men_react()$pourcent),0,(max(pop_type_men_react()$pourcent))),
                          ticktext = c(" "," "," ")),
             yaxis = list(title = ''),
             plot_bgcolor = 'white', # Couleur de fond du plot
             paper_bgcolor = 'white', # Couleur de fond du papier
             font = list(color = 'black'))%>%
      # Ajout de l'annotation pour la source en bas à droite
      add_annotations(
        text = "Source : INSEE<br>Traitement : ADIL30",
        xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
        x = 1, y = -0.20, showarrow = FALSE,  # Placement en bas à droite
        font = list(size = 9, color = 'gray')
      )

    
    
      
    
    })
    
    
    
    
    
    
    
    ##_____________ B.1.2.2   graphe6pop pop_carac_fam_mo  ___________####  
    
    pop_carac_fam_react <- reactive({
      req(input$epci)
      pop_carac_fam %>%
        filter(LIBEPCI == input$epci)
    })

    output$graphe6pop <- renderPlotly({
      
      
      
      
      
      graphe6pop <- plot_ly(
        pop_carac_fam_react() %>%
          group_by(MILLESIME) %>%
          mutate(Proportion = EFFECTIF / sum(EFFECTIF)) %>%
          ungroup(),
        x = ~Proportion, 
        y = ~paste0(as.character(MILLESIME), "  "),
        color = ~CATEGORIE, 
        
        type = 'bar', 
        orientation = 'h',
        
        hoverinfo = 'y+text',  # Information affichée au survol (année et texte)
        hovertext = ~paste('Catégorie de famille : ', CATEGORIE, '<br>Nombre de familles :', format(EFFECTIF, big.mark = " ")),  # Texte affiché au survol
        text = ~paste0(scales::percent(Proportion, accuracy = 1)),
        textposition = 'inside',
        textfont = list(color = 'white'),
        colors = colormonop
        # colors = "RdBu"
      ) %>%
        layout(
          title =list (text = paste0("Répartition des familles monoparentales en ", max(pop_carac_fam_react()$MILLESIME), " selon le genre du parent",
                                     "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>" ),
          font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
          legend = list(
            traceorder = "normal",
            orientation = "h",   # Horizontal orientation
            x = 0.5,             # Center the legend
            xanchor = "center",  # Align the center
            y = 1.07,              # Position above the plot
            bgcolor = "rgba(0,0,0,0)"
          ),
          margin = list(
            l = 50,  # marge gauche
            r = 20,  # marge droite
            b = 40,  # marge en bas
            t = 80  # marge en haut
          ),
          xaxis = list(title = " ",tickformat = ",.0%",
                       tickvals = c(0,50,100),
                       ticktext = c(" "," "," ")),
          yaxis = list(title = " ",
                       tickvals = c("a","b","c"),
                       ticktext = c(" "," "," ")),
      
          barmode = 'stack',
          paper_bgcolor = 'white',
          plot_bgcolor = "white",
          font = list(color = 'black')
        )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : INSEE<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.1, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
      
      
      
      
      # graohe5pop <- plot_ly(pop_carac_fam_react(), x = ~EFFECTIF, y = ~CATEGORIE, type = 'bar',orientation = "h",
      #                        color = ~CATEGORIE, colors = colorama,
      #                        hoverinfo = 'text',  # Information affichée au survol (année et texte)
      #                        hovertext = ~paste('Catégorie : ', CATEGORIE, '<br>Nombre de ménages :', EFFECTIF),  # Texte affiché au survol
      #                        text = ~format(EFFECTIF, big.mark = " "),
      #                        textposition = 'outside',
      #                        textfont = list(color = 'white'),
      #                       showlegend = F) %>%
      #   layout(title = 'Caractéritiques des familles',
      #          margin = list(
      #            l = 50,  # marge gauche
      #            r = 50,  # marge droite
      #            b = 50,  # marge en bas
      #            t = 100  # marge en haut
      #          ),
      #          xaxis = list(title = 'Effectif'),
      #          yaxis = list(title = ''),
      #          plot_bgcolor = 'white', # Couleur de fond du plot
      #          paper_bgcolor = 'white', # Couleur de fond du papier
      #          font = list(color = 'black'))
      
    })
    


    # 
    
    
    
    
    
    
    ## _____ B.2   DEMOGRAPHIE --> Niveau de vie ______________ ####
    
    ####________ B.2.1   HISTORIQUES DU NIVEAU DE VIE _________________####
    
    
    ##_____________ B.2.1.1   graphe1nv  ___________####  
    
    
    tab_rev_histo_react <- reactive({
      req(input$epci)
      tab_rev_histo %>%
        filter(LIBEPCI == input$epci)
    })
    
    # the plot
    output$graphe1nv <- renderPlotly({
      
      y_min <- min(tab_rev_histo_react()$REV_MEDIAN, na.rm = TRUE)
      y_max <- max(tab_rev_histo_react()$REV_MEDIAN, na.rm = TRUE)

      # Ajouter un léger buffer autour des valeurs min et max pour ne pas coller aux bords
      buffer <- (y_max - y_min) * 1.5  # 5% de buffer

      graphe1nv <- plot_ly(tab_rev_histo_react(), x = ~MILLESIME, y = ~REV_MEDIAN, type = 'bar',
                           marker=list(color = "#cf4f3d"),
                           hoverinfo = 'x+text',  # Information affichée au survol (année et texte)
                           hovertext = ~paste0('Rapport inter-décile (rapport entre le 9e et le 1er décile de revenu) : ', RAP_INTERDEC),  # Texte affiché au survol
                           text = ~paste0(format(REV_MEDIAN, big.mark = " "), "€"),
                           textposition = 'inside',
                           textfont = list(color = 'white')) %>%
        layout(title = list(text= paste0('Evolution du revenu médian annuel disponible des ménages par<br> unité de consommation (UC) des ménages de ',min(tab_rev_histo_react()$MILLESIME)," à ", max(tab_rev_histo_react()$MILLESIME),
                                         "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                            font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
               
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               xaxis = list(title = 'Année'),
               yaxis = list(title = 'Revenu médian (UC)', tickformat = ".," 
               ,
                range = c(y_min - buffer, y_max + (buffer/2)))
               ,
               plot_bgcolor = 'white', # Couleur de fond du plot
               paper_bgcolor = 'white', # Couleur de fond du papier
               font = list(color = 'black'))%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : INSEE FiLoSoFi<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.15, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
    })
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    ##_____________ B.2.1.2   graphe2nv  ___________####  
    
    
    tab_pauv_60_react <- reactive({
      req(input$epci)
      tab_pauv_60 %>%
        filter(LIBEPCI == input$epci)
    })
    
    # the plot
    output$graphe2nv <- renderPlotly({

       y_min <- min(tab_pauv_60_react()$TAUX_PAUV60, na.rm = TRUE)
       y_max <- max(tab_pauv_60_react()$TAUX_PAUV60, na.rm = TRUE)

       # Ajouter un léger buffer autour des valeurs min et max pour ne pas coller aux bords
       buffer <- (y_max - y_min) * 2  # 5% de buffer

      graphe2nv <- plot_ly(tab_pauv_60_react(), x = ~MILLESIME, y = ~TAUX_PAUV60, type = 'bar',
                            marker=list(color = "#cf4f3d"),
                            hoverinfo = 'x+text',  # Information affichée au survol (année et texte)
                            hovertext = ~paste0('Revenu médian des ménages pauvres : ', format(round(MED_PAUV60, 0), big.mark = " "),"€"),  # Texte affiché au survol
                            text = ~paste0(format(TAUX_PAUV60, big.mark = " "), "%"),
                            textposition = 'inside',
                            textfont = list(color = 'white')) %>%
        layout(title = list(text= paste0('Evolution du taux de pauvreté de ',min(tab_pauv_60_react()$MILLESIME)," à ", max(tab_pauv_60_react()$MILLESIME),
                                         "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
               font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
               
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 70  # marge en haut
               ),
               xaxis = list(title = 'Année'),
               yaxis = list(title = 'Taux (%)'
                            ,
                            range = c(y_min - buffer, y_max + (buffer/2)))
               ,
               plot_bgcolor = 'white', # Couleur de fond du plot
               paper_bgcolor = 'white', # Couleur de fond du papier
               font = list(color = 'black'))%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : INSEE FiLoSoFi<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.15, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
    })
    
    
    
    
    ####________ B.2.2   CARACTERISTIQUES DU NIVEAU DE VIE ACTUEL _________________####
    
    ##_____________ B.2.2.1   graphe3nv ruc_so___________####  
    
    
    
    ruc_so_react <- reactive({
      req(input$epci)
      ruc_so %>%
        filter(LIBEPCI == input$epci)
    })
    
    output$graphe3nv <- renderPlotly({
      
      graphe3nv <- plot_ly(ruc_so_react(), x = ~REV_MEDIAN, y = ~TYPE, type = 'bar',orientation = "h",
                           color = ~TYPE, colors = "YlGnBu",
                           hoverinfo = 'text',  # Information affichée au survol (année et texte)
                           hovertext = ~paste0('Catégorie : ', TYPE, '<br>Rapport inter-décile (rapport entre le 9e et le 1er décile de revenu) : ', format(RAP_INTERDEC, big.mark = " "), "%"),  # Texte affiché au survol
                           text = ~paste0(format(REV_MEDIAN, big.mark = " "), "€"),
                           textposition = 'inside',
                           textfont = list(color = 'black'),
                           showlegend = F) %>%
        layout(title =list (text= paste0('Revenu médian annuel disponible des ménages par unité de consommation (UC)<br> en ',max(pop_type_men_react()$MILLESIME), " selon le statut d'occupation",
                                         "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                            font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               xaxis = list(title = 'Revenus médians (UC)', tickformat = ".,"),
               yaxis = list(title = ''),
               plot_bgcolor = 'white', # Couleur de fond du plot
               paper_bgcolor = 'white', # Couleur de fond du papier
               font = list(color = 'black'))%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : INSEE FiLoSoFi<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.20, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
      
    })
    
    
    
    
    
    
    
    ##_____________ B.2.2.2   graphe4nv pauv_so60 ___________####  
    
    
    
    pauv_so60_react <- reactive({
      req(input$epci)
      pauv_so60 %>%
        filter(LIBEPCI == input$epci)
    })
    
    output$graphe4nv <- renderPlotly({
      
      graphe4nv <- plot_ly(pauv_so60_react(), x = ~TAUX_PAUV60, y = ~TYPE, type = 'bar',orientation = "h",
                            color = ~TYPE, colors = "YlGnBu",
                            hoverinfo = 'text',  # Information affichée au survol (année et texte)
                            hovertext = ~paste0('Catégorie : ', TYPE, '<br>Revenu médian de la sous-population pauvre : ', format(MED_PAUV60, big.mark = " "), "€"),  # Texte affiché au survol
                            text = ~paste0(format(TAUX_PAUV60, big.mark = " "), "%"),
                            textposition = 'inside',
                            textfont = list(color = 'black'),
                            showlegend = F) %>%
        layout(title =list (text= paste0('Taux de pauvreté des ménages en ',max(pop_type_men_react()$MILLESIME), " selon le statut d'occupation",
                                         "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                            font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               xaxis = list(title = 'Taux de pauvreté', tickformat = "."),
               yaxis = list(title = ''),
               plot_bgcolor = 'white', # Couleur de fond du plot
               paper_bgcolor = 'white', # Couleur de fond du papier
               font = list(color = 'black'))%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : INSEE FiLoSoFi<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.20, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
      
    })
    
    
    
    
 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    ## ___  C. CHIFFRES CLEF ! (LOGEMENTS) ####
    ## _____ C.1   LOGEMENTS --> Parc de logements ______________ ####
    
    ####________ C.1.1   HISTORIQUES DU PARC DE LOGEMENTS _________________####
    
    ##_____________ C.1.1.1   graphe1log histo_logement___________####  
    
    histo_logement_react <- reactive({
      req(input$epci)
      histo_logement %>%
        filter(LIBEPCI == input$epci)
    })
    
    output$graphe1log <- renderPlotly({
      
      data2 <- histo_logement_react()%>%
        group_by(MILLESIME, LIBEPCI, LOG)%>%
        summarise(.groups = "drop")
      
      
      y_min <- min(histo_logement_react()$LOG, na.rm = TRUE)
      y_max <- max(histo_logement_react()$LOG, na.rm = TRUE)
      
      # Ajouter un léger buffer autour des valeurs min et max pour ne pas coller aux bords
      buffer <- (y_max - y_min) * 7.5  # 5% de buffer

      graphe1log <- plot_ly()%>%
        add_bars(
       
          data = histo_logement_react(), 
          x = ~as.factor(MILLESIME), 
          y = ~NOMBRE, 
          # type = 'bar', 
          text =~format(NOMBRE, big.mark = " "),  textposition = "middle",
          color = ~TYPE_HABITAT, textfont = list(color = 'white'),
          colors =  colorhaj,
          hoverinfo = 'x+text',  # Information affichée au survol (x ( annee) et texte)
          hovertext = ~paste0('Type d\'habitat : ', TYPE_HABITAT, '<br>Nombre de logements : ', format(NOMBRE, big.mark = " "))  # Texte affiché au survol
        ) %>%
          add_lines(
            data = data2,
            x = ~as.factor(MILLESIME),
            y = ~LOG,  
            
            # type = 'scatter',
            line = list(shape = 'spline', color = "black"), 
            mode = 'lines+markers',
            text = ~format(LOG, big.mark = " "),
            name = "Taille du parc",
            color = "Taille du parc",
            marker = list(color = "black"),
             # color = "black",
            
            textposition = 'top',
            textfont = list(size = 11,color = 'black', family = "Arial Black"),
            showlegend = T,
            hoverinfo = 'x+text',  # Ignorer l'affichage des étiquettes lors du survol
            # hovertext = paste0("Logements du parc : " , format(histo_logement_react()$LOG, big.mark = " "))
            
          ) %>%
          layout(
            title = list(text=paste0("Evolution des logements du parc de ",min(histo_logement_react()$MILLESIME) ," à ",max(histo_logement_react()$MILLESIME)," selon le type d\'habitat",
                                     "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                         font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
            margin = list(
              l = 50,  # marge gauche
              r = 50,  # marge droite
              b = 50,  # marge en bas
              t = 100  # marge en haut
            ),
            xaxis = list(title = "Année"),
            yaxis = list(title = "Nombre de logements",tickformat = ",.",range = c(min(histo_logement_react()$NOMBRE)/2, y_max + (buffer/3))),
            barmode = 'stack',
            paper_bgcolor = 'white',
            plot_bgcolor = "white",
            font = list(color = 'black'),
            legend = list(
              orientation = "h",   # Horizontal orientation
              bgcolor = ("rgba(0, 0, 0, 0)"),
              x = 0.5,             # Center the legend
              xanchor = "center",  # Align the center
              y = 1.12              # Position above the plot
              
            )
            
          )%>%
          # Ajout de l'annotation pour la source en bas à droite
          add_annotations(
            text = "Source : INSEE<br>Traitement : ADIL30",
            xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
            x = 1, y = -0.18, showarrow = FALSE,  # Placement en bas à droite
            font = list(size = 9, color = 'gray')
          )
        

      
      
    })
    
    
    
    
    
    
    ##_____________ C.1.1.2   graphe2log histo_logement_cate####
    
    
    histo_logement_cate_react <- reactive({
      req(input$epci)
      histo_logement_cate %>%
        filter(LIBEPCI == input$epci)%>%
        mutate(TYPE_LOG = factor(TYPE_LOG, levels=c("Logements vaccants", "Résidences secondaires et occasionnelles","Résidences principales"), ordered = T))
        
    })
    
    
    output$graphe2log <- renderPlotly({
      graphe2log <- plot_ly(
        histo_logement_cate_react()%>%
          group_by(MILLESIME) %>%
          mutate(pourcent = round((NOMBRE * 100 / sum(NOMBRE)), 1)) %>%
          ungroup(),
        x = ~as.factor(MILLESIME),
        y = ~pourcent, color = ~TYPE_LOG,
        colors = colorlogpr, 
        type = 'bar',
        hoverinfo = 'x+text',
        text =~paste0(pourcent, "%"),
        textposition = 'inside',
        insidetextfont = list(color = 'white'),outsidetextfont = list(color = 'black'),
        hovertext = ~paste("Nature des logements :", TYPE_LOG, "<br>Nombre de logements :", format(NOMBRE, big.mark = " "))
      ) %>%
        layout(title = list( text= paste0("Évolution de la répartition des logements de ", min(histo_logement_cate_react()$MILLESIME) ," à ", max(histo_logement_cate_react()$MILLESIME) ,"<br>selon la catégorie de logement" ,
                                          "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"   ),
                             font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
               showlegend = TRUE,
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               xaxis = list(title = ""),
               yaxis = list(title = "Proportion (%)",tickformat = ",."),
               barmode = 'stack',
               plot_bgcolor = "white",  # Couleur de fond du graphique
               paper_bgcolor = "white",  # Couleur de fond du papier
               font = list(color = 'black'),
               legend = list(
                 orientation = "h",   # Horizontal orientation
                 bgcolor = ("rgba(0, 0, 0, 0)"),
                 x = 0.5,             # Center the legend
                 xanchor = "center",  # Align the center
                 y = -0.08              # Position above the plot
                 
               )
               
        )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : INSEE<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.255, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
      
    
      
      
    })
    
    
    
    
    ##_____________ C.1.1.3   graphe3log   rp_typo  ####
    
    
    rp_typo_react <- reactive({
      req(input$epci)
      rp_typo %>%
        filter(LIBEPCI == input$epci)%>%
        mutate(TYPO = factor(TYPO, levels = c("T1", "T2", "T3", "T4", "T5et+"), ordered = T))
      
    })
    
    
    output$graphe3log <- renderPlotly({
      graphe3log <- plot_ly(
        rp_typo_react()%>%
          group_by(MILLESIME) %>%
          mutate(Proportion = round((NOMBRE * 100 / sum(NOMBRE, na.rm = TRUE)), 1)) %>%
          ungroup(), x = ~as.factor(MILLESIME),
        y = ~Proportion, color = ~TYPO,
        colors = colorlogpr,
        text =~paste0(Proportion,'%'),
        textposition = 'auto',
        insidetextfont = list(color = 'white'),outsidetextfont = list(color = 'black'),
        type = 'bar', hoverinfo = 'x+text', 
        hovertext = ~paste("Typologie des résidences principales :", TYPO, "<br>Nombre de logements :", format(NOMBRE, big.mark = " "))
      ) %>%
        layout(title = list( text= paste0("Évolution de la répartition des résidences principales<br>de ", min(rp_typo_react()$MILLESIME) ," à ", max(rp_typo_react()$MILLESIME) ," selon la typologie",
                                          "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"    ),
                             font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
               showlegend = TRUE,
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               xaxis = list(title =""),
               yaxis = list(title = "Proportion (%)", range = c(0, 110)
                            # ,tickformat = ",.0%",
                            # tickvals = c(0,50,100),
                            # ticktext = c(" "," "," ") 
                            ),
               barmode = 'stack',
               plot_bgcolor = "white",  # Couleur de fond du graphique
               paper_bgcolor = "white",  # Couleur de fond du papier
               font = list(color = 'black'),
               legend = list(
                 orientation = "h",   # Horizontal orientation
                 bgcolor = ("rgba(0, 0, 0, 0)"),
                 x = 0.5,             # Center the legend
                 xanchor = "center",  # Align the center
                 y = -0.07              # Position above the plot
                 
               )
               
        )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : INSEE<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.20, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
      
      
      
      
    })
    
    
    
    
    
    
    
    
    ####________ C.1.2   CARACTERISTIQUES DU PARC DE LOGEMENT _________________####
    
    
    ##_____________ C.1.2.1   graphe4log   rp_cons  ####
    
    rp_cons_react <- reactive({
      req(input$epci)
      rp_cons %>%
        filter(LIBEPCI == input$epci)%>%
        mutate(pourcent = (NOMBRE*100)/(sum(NOMBRE)))
    
    })
    
    output$graphe4log <- renderPlotly({
      
      graphe4log <- plot_ly(
        rp_cons_react(), x = ~pourcent, y =~ANNEE_CONS, type = 'bar', orientation = 'h',
        color = ~ANNEE_CONS, colors = colorlog,
        # colors = colorabd,
        hoverinfo = 'text',  # Information affichée au survol (année et texte)
          hovertext = ~paste('Ancienneté : ', ANNEE_CONS, '<br>Nombre de logements :',format(NOMBRE, big.mark = " ")),  # Texte affiché au survol
        text = ~paste0(round(pourcent,1),"%", " (",format(NOMBRE, big.mark = " "),")"),
        textposition = 'auto', showlegend = F,
        textfont = list(color = 'black')) %>%
        
        layout(title = list(text=paste0("Répartition des résidences principales en " ,max(rp_cons_react()$MILLESIME) ,"<br>selon leurs anciennetés",
                                        "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                            font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               xaxis = list(title = " ",tickformat = ",.0%",
                            tickvals = c(0,50,100),
                            ticktext = c(" "," "," ")),
               yaxis = list(title = ' '),
               plot_bgcolor = 'white', # Couleur de fond du plot
               paper_bgcolor = 'white', # Couleur de fond du papier
               font = list(color = 'black'),
               legend = list(
                 orientation = "h",   # Horizontal orientation
                 bgcolor = ("rgba(0, 0, 0, 0)"),
                 x = 0.5,             # Center the legend
                 xanchor = "center",  # Align the center
                 y = 1.15              # Position above the plot
                 
               )
               
        )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : INSEE<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.20, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
    })
    
    
    
    
    
    ##_____________ C.1.2.2   graphe5log   rp_so  ####
    
    
    rp_so_react <- reactive({
      req(input$epci)
      rp_so %>%
        filter(LIBEPCI == input$epci)
    })
    
    
    
    
    output$graphe5log <- renderPlotly({

      graphe5log <- rp_so_react()%>%
        mutate("Percent" = round((NOMBRE*100)/(sum(NOMBRE)),1)) %>%
        plot_ly(
          labels = ~STATUT,
          values = ~NOMBRE,
          text = ~paste0(Percent,"%"),
          # insidetextfont = list(color = 'black'),
          hoverinfo = 'text',
          hovertext= ~paste0( STATUT, '<br>Nombre de résidences principales : ',format(NOMBRE, big.mark = " ")),
          textinfo = 'text',
          
          insidetextfont = list(color = 'white'),
          sort = F,
          marker = list(colors = colorlogpr))
      graphe5log <- graphe5log %>% add_pie(hole = 0.5, domain = list(x = c(0, 1), y = c(0, 1))  )
      
      graphe5log <- graphe5log %>% layout(title = list(text=paste0("Répartition des résidences principales en ",max(rp_so_react()$MILLESIME),"<br>selon le statut d\'occupation",
                                                                   "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                                                         font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)), showlegend = T, 
                                            margin = list(
                                              l = 50,  # marge gauche
                                              r = 50,  # marge droite
                                              b = 50,  # marge en bas
                                              t = 100  # marge en haut
                                            ),
                                            paper_bgcolor = 'white',  # couleur de fond du papier
                                            plot_bgcolor = 'white',
                                            font = list(color = 'black'),
                                            
                                            xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
                                            
                                            yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
                                            legend = list(
                                              orientation = "h",   # Horizontal orientation
                                              bgcolor = ("rgba(0, 0, 0, 0)"),
                                              x = 0.5,             # Center the legend
                                              xanchor = "center",  # Align the center
                                              y = -0.06              # Position above the plot
                                              
                                            )
                                            
      )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : INSEE,<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.15, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      graphe5log
      
      
      
      
    })
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    ## _____ C.2   LOGEMENTS --> Dynamique de construction ______________ ####
    
    ####________ C.2.1   HISTORIQUES DE LA CONSTRUCTION _________________####
    
    ##_____________ C.2.1.1   graphe1dyn histo_logement___________####  
    
    
    
    
    
    histo_cons_react <- reactive({
      req(input$epci)
      histo_cons %>%
        filter(LIBEPCI == input$epci)
    })  
    
    
    output$graphe1dyn <- renderPlotly({
      # Calcul du total par année
      data_total <- histo_cons_react() %>%
        group_by(MILLESIME) %>%
        summarise(Total = sum(NOMBRE, na.rm = TRUE)) %>%
        ungroup()
      
      # Graphique
      graphe1dyn <- plot_ly() %>%
        # Barres empilées
        add_bars(
          data = histo_cons_react(),
          x = ~as.factor(MILLESIME), 
          y = ~NOMBRE, 
          color = ~TYPE, 
          colors = colordyn, 
          text =~NOMBRE,
          textposition = 'auto',
          textfont = list(color = 'white'),
          hoverinfo = "x+text",
          hovertext = ~paste("Statut :", TYPE, 
                             "<br>Nombre de logements :", format(NOMBRE, big.mark = " "))
        ) %>%
        # # Ligne pour le volume total
        # add_lines(
        #   data = data_total,
        #   x = ~as.factor(MILLESIME),
        #   y = ~Total,line = list(shape = 'spline', color = "#bb769d"),mode = 'lines+markers',text = ~Total, marker = list(color = "#94398a"),
        #   textposition = 'top',
        #   name = "Logements totaux",  # Légende de la courbe
        #   textfont = list(color = 'black',bold = TRUE,  family = 'Arial Black'),  # Style de la ligne
        #   hoverinfo = "x+text",
        #   hovertext = ~paste("Logements totaux :", format(Total, big.mark = " "))
        # ) %>%
        # Mise en page
        layout(
          title = list(text = paste0("Evolution des logements autorisés et commencés* de ",
                                     min(histo_cons_react()$MILLESIME), 
                                     " à ", max(histo_cons_react()$MILLESIME), 
                                     "<br>(en date réelle)",
                                     "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                       font = list(size = 15, color = 'black', family = 'Arial Black', bold = TRUE)),
          showlegend = TRUE,
          margin = list(
            l = 50,  # marge gauche
            r = 50,  # marge droite
            b = 50,  # marge en bas
            t = 100  # marge en haut
          ),
          xaxis = list(title = "Année"),
          yaxis = list(title = "Nombre de logements", tickformat = ".,0"),
          # barmode = "stack",
          plot_bgcolor = "white",  # Couleur de fond du graphique
          paper_bgcolor = "white", # Couleur de fond du papier
          font = list(color = 'black'),
          legend = list(
            orientation = "h",   # Légende horizontale
            bgcolor = ("rgba(0, 0, 0, 0)"),
            x = 0.5,             # Centrer la légende
            xanchor = "center",  # Alignement centré
            y = 1.06             # Position au-dessus du graphique
          )
        ) %>%
        # Annotation pour la source
        add_annotations(
          text = "Source : INSEE Sitadel<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références pour l'annotation
          x = 1, y = -0.20, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )%>%

        add_annotations(
          text = "*Permis de construire et déclarations préalables<br> pour la création de logements, y compris par transformation<br> ou réhabilitation de locaux préexistants",
          xref = 'paper', yref = 'paper',  # Références pour l'annotation
          x = -0.05, y = -0.2159, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
      graphe1dyn
    })
    
    
    
    
    ##_____________ C.2.1.2   graphe2dyn permis_nat___________####  
    
    
    
    
    
    permis_nat_react <- reactive({
      req(input$epci)
      permis_nat %>%
        filter(LIBEPCI == input$epci)
    })  
    
    
    output$graphe2dyn <- renderPlotly({
      # Calcul du total par année
      data_total <- permis_nat_react() %>%
        group_by(MILLESIME) %>%
        summarise(Total = sum(NOMBRE, na.rm = TRUE)) %>%
        ungroup()
      
      data_percent <-  permis_nat_react() %>%
        group_by(MILLESIME, NATURE_PROJET_COMPLETEE) %>%
        summarise(Total2 = sum(NOMBRE, na.rm = TRUE)) %>%
        # ungroup()%>%
        mutate(percent = Total2*100/sum(Total2))
      
      
      graphe2dyn <- plot_ly() %>%
        # Barres empilées
        add_bars(
          data = permis_nat_react(),
          x = ~as.factor(MILLESIME), 
          y = ~NOMBRE, 
          color = ~NATURE_PROJET_COMPLETEE, 
          colors = coloryou2, text =~NOMBRE, textposition = 'auto', textfont = list(color = 'white'),
          hoverinfo = "x+text",
          hovertext = ~paste0("Nature du projet : ", NATURE_PROJET_COMPLETEE, 
                              "<br>Proportion : ", round(data_percent$percent, 0),"%")
        ) %>%
        # Ligne pour le volume total
        add_lines(
          data = data_total,
          x = ~as.factor(MILLESIME),
          y = ~Total,line = list(shape = 'spline', color = "black"),
          mode = 'lines+markers',
          text = ~format(Total, big.mark = " "), 
          marker = list(color = "black"),
          textposition = 'top',
          name = "Permis globaux ",  # Légende de la courbe
          textfont = list(color = 'black', size = 11, family = 'Arial Black'),  # Style de la ligne
          hoverinfo = "x+text",
          hovertext = ~paste("Nombre total de permis :", format(Total, big.mark = " "))
        ) %>%
        
        layout(
          title = list(text = paste0("Évolution des logements autorisés de ",
                                     min(permis_nat_react()$MILLESIME), 
                                     " à ", max(permis_nat_react()$MILLESIME), 
                                     "<br>selon la nature du projet",
                                     "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                       font = list(size = 15, color = 'black', family = 'Arial Black', bold = TRUE)),
          showlegend = TRUE,
          margin = list(
            l = 50,  # marge gauche
            r = 50,  # marge droite
            b = 50,  # marge en bas
            t = 100  # marge en haut
          ),
          xaxis = list(title = ""),
          yaxis = list(title = "Nombre de logements", tickformat = ".,0"),
          barmode = "stack",
          plot_bgcolor = "white",  # Couleur de fond du graphique
          paper_bgcolor = "white", # Couleur de fond du papier
          font = list(color = 'black'),
          legend = list(
            orientation = "h",   # Légende horizontale
            bgcolor = ("rgba(0, 0, 0, 0)"),
            x = 0.5,             # Centrer la légende
            xanchor = "center",  # Alignement centré
            y = -0.075             # Position au-dessus du graphique
          )
        ) %>%
        # Annotation pour la source
        add_annotations(
          text = "Source : INSEE Sitadel<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références pour l'annotation
          x = 1, y = -0.26, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
      graphe2dyn
    })
    
    
    
    
    
    

    
    
    

    
    
    
    
    
    
    ####________ C.2.2   HISTORIQUES DU PERMIS DE CONSTRUIRE _________________####
    
    
 
    
    ##_____________ C.2.2.1   graphe3dyn cons_typo___________####  
    
    
    cons_type_react <- reactive({
      req(input$epci)
      cons_type %>%
        filter(LIBEPCI == input$epci)
    })
    
    
    output$graphe3dyn <- renderPlotly({
      graphe3dyn <- plot_ly(cons_type_react(), x = ~as.factor(MILLESIME),
                            y = ~LOG_AUT, color = ~TYPE_LGT,colors = colordyn,
                            # text=~LOG_AUT,textposition = "top",textfont = list(color = 'black'),
                            type = 'scatter', mode = 'lines+markers', line = list(shape = 'spline'),hoverinfo = "x+text",
                            hovertext = ~paste("Type de logement :", TYPE_LGT, "<br>Nombre de logements :", format(LOG_AUT, big.mark = " "))
      ) %>%
        layout(title = list( text= paste0("Évolution des logements autorisés de ", min(cons_type_react()$MILLESIME) ," à ", max(cons_type_react()$MILLESIME) ,"<br>selon la catégorie de logements",
                                          "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"    ),
                             font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
               showlegend = TRUE,
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               xaxis = list(title = ""),
               yaxis = list(title = "Nombre de logements"),
               plot_bgcolor = "white",  # Couleur de fond du graphique
               paper_bgcolor = "white",  # Couleur de fond du papier
               font = list(color = 'black'),
               legend = list(
                 orientation = "h",   # Horizontal orientation
                 bgcolor = ("rgba(0, 0, 0, 0)"),
                 x = 0.5,             # Center the legend
                 xanchor = "center",  # Align the center
                 y = -0.075              # Position above the plot
                 
               )
               
        )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : INSEE Sitadel<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.22, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
      
      
      
      
    })
    
    
    
    
    
    
    
    
    
    
    ##_____________ C.2.2.2   graphe4dyn cons_type_ropo####
    
    
    cons_type_react <- reactive({
      req(input$epci)
      cons_type %>%
        filter(LIBEPCI == input$epci)
      
    })
    
    
    output$graphe4dyn <- renderPlotly({
      graphe4dyn <- plot_ly(
        cons_type_react()%>%
          group_by(MILLESIME) %>%
          mutate(pourcent = round((LOG_AUT * 100 / sum(LOG_AUT)), 1)) %>%
          ungroup(),
        x = ~as.factor(MILLESIME),
        y = ~pourcent, color = ~TYPE_LGT,colors = colordyn  , 
        type = 'bar', hoverinfo = 'x+text', text =~paste0(round(pourcent,0), "%"),  textposition = 'auto',textfont = list(color = 'white'),
        # type = 'scatter', mode = 'lines+markers', line = list(shape = 'spline'),hoverinfo = "x+text",
        hovertext = ~paste("Type des logements :", TYPE_LGT, "<br>Nombre de logements :", format(LOG_AUT, big.mark = " "))
      ) %>%
        layout(title = list( text= paste0("Évolution de la répartition des logements autorisés<br>de ", min(cons_type_react()$MILLESIME) ," à ", max(cons_type_react()$MILLESIME) ," selon la catégorie de logements" ,
                                          "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"   ),
                             font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
               showlegend = TRUE,
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               xaxis = list(title = ""),
               yaxis = list(title = "Proportion(%)",tickformat = ",."),
               barmode = 'stack',
               plot_bgcolor = "white",  # Couleur de fond du graphique
               paper_bgcolor = "white",  # Couleur de fond du papier
               font = list(color = 'black'),
               legend = list(
                 orientation = "h",   # Horizontal orientation
                 bgcolor = ("rgba(0, 0, 0, 0)"),
                 x = 0.5,             # Center the legend
                 xanchor = "center",  # Align the center
                 y = -0.075              # Position above the plot
                 
               )
               
        )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : INSEE Sitadel<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.22, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
      
      
      
      
    })
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    ##_____________ C.2.2.3   graphe5dyn permis_typo___________####  
    
    
    
    
    permis_typo_react <- reactive({
      req(input$epci)
      permis_typo %>%
        filter(LIBEPCI == input$epci)
    })
    
    
    output$graphe5dyn <- renderPlotly({
      graphe5dyn <- plot_ly(
                            permis_typo_react()%>%
                              group_by(MILLESIME) %>%
                              mutate(pourcent = round((NOMBRE * 100 / sum(NOMBRE)), 1)) %>%
                              ungroup(),
                            x = ~as.factor(MILLESIME),
                            y = ~NOMBRE, color = ~TYPE,
                            colors = colordyn2,
                            text = ~paste0(pourcent,"%"),
                            type = 'bar', 
                            textposition = 'auto', 
                            insidetextfont = list(color = 'white'),
                            outsidetextfont = list(color = 'black'),
                            hoverinfo = "x+text",
                            hovertext = ~paste("Type de logement :",
                                               TYPE, "<br>Nombre de logements :", format(NOMBRE, big.mark = " "))
      ) %>%
        layout(title = list( text= paste0("Évolution des logements autorisés de selon", min(permis_typo_react()$MILLESIME) ," à ", max(permis_typo_react()$MILLESIME) ,"<br>la typologie des logements" ,
                                          "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"   ),
                             font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
               showlegend = TRUE,
               barmode = "stack",
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               xaxis = list(title = ""),
               yaxis = list(title = "Proportion(%)",tickformat = ",."),
               plot_bgcolor = "white",  # Couleur de fond du graphique
               paper_bgcolor = "white",  # Couleur de fond du papier
               font = list(color = 'black'),
               legend = list(
                 traceorder = "normal",
                 orientation = "h",   # Horizontal orientation
                 bgcolor = ("rgba(0, 0, 0, 0)"),
                 x = 0.5,             # Center the legend
                 xanchor = "center",  # Align the center
                 y = -0.075              # Position above the plot
                 
               )
               
        )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : INSEE Sitadel<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1.04, y = -0.22, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
      
      
      
      
    })
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    ##_____________ C.2.2.4   graphe6dyn permis_catnat___________####  
    
    
    
    
    
    
    permis_catnat_react <- reactive({
      req(input$epci)
      permis_catnat %>%
        filter(LIBEPCI == input$epci)
    })
    
    
    
    output$graphe6dyn <- renderPlotly({
      
      graphe6dyn <- plot_ly(permis_catnat_react()%>%
                               filter(MILLESIME == max(MILLESIME))
                             , x = ~TYPE, y = ~NOMBRE , 
                             type = 'bar',color = ~NATURE_PROJET_COMPLETEE, colors = coloryou2,  text =~NOMBRE, textposition = 'auto', textfont = list(color = 'white'),
                             hoverinfo = 'text',  # Information affichée au survol (année et texte)
                             hovertext = ~paste('Nature du projet : ', NATURE_PROJET_COMPLETEE,'<br>Catégorie des logements :', TYPE, '<br>Nombre de logements :', format(NOMBRE, big.mark = " ")))%>%  # Texte affiché au survol) 
        layout(title = list(text =  paste0("Répartition des logements autorisés en ",max(permis_catnat_react()$MILLESIME) ," selon leurs catégories<br>et la nature du projet",
                                           "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>" ) ,
                            font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               xaxis = list(title = "Catégorie"),
               yaxis = list(title = "Nombres de logements",tickformat = ",."),
               barmode = 'stack',
               paper_bgcolor = 'white',
               plot_bgcolor = "white" ,
               font = list(color = 'black'),
               legend = list(
                 orientation = "h",   # Horizontal orientation
                 bgcolor = ("rgba(0, 0, 0, 0)"),
                 x = 0.5,             # Center the legend
                 xanchor = "center",  # Align the center
                 y = 1.06              # Position above the plot
                 
               )
               
        )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : INSEE Sitadel<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.20, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
      
      
    })
    
 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    ## ___  D. CHIFFRES CLEF ! (MARCHE) ####
    
    ## _____ D.1   MARCHE --> Marché immobilier ______________ ####
    
    ####________ D.1.1 HISTORIQUE DES MUTATIONS_________________####
    
    ##_____________ D.1.1.1   graphe0mar évo volume mutation par type(maison, appart, tab)  ___________####
    
    
    
    
    EVO_MUT_react <- reactive({
      req(input$epci)
      EVO_MUT %>%
        filter(LIBEPCI == input$epci)
    })  
    
    
    output$graphe0mar <- renderPlotly({
      # Calcul du total par année
      data_total <- EVO_MUT_react() %>%
        group_by(MILLESIME) %>%
        summarise(Total = sum(NOMBRE, na.rm = TRUE)) %>%
        ungroup()
      
      graphe0mar <- plot_ly() %>%
        # Barres empilées
        add_bars(
          data = EVO_MUT_react(),
          x = ~as.factor(MILLESIME), 
          y = ~NOMBRE, 
          color = ~TYPE, 
          colors = colormar0, text =~NOMBRE, textposition = 'auto', textfont = list(color = 'white'),
          hoverinfo = "x+text",
          hovertext = ~paste("Type de l'habitat :", TYPE, 
                             "<br>Nombre de mutations :", format(NOMBRE, big.mark = " "))
        ) %>%
        # Ligne pour le volume total
        add_lines(
          data = data_total,
          x = ~as.factor(MILLESIME),
          y = ~Total,
          line = list(shape = 'spline', color = "black"),
          mode = 'lines+markers',
          text = ~format(Total, big.mark = " "), 
          marker = list(color = "black"),
          textposition = 'top',
          name = "Mutations totales ",  # Légende de la courbe
          textfont = list(color = 'black',size = 11,  family = 'Arial Black'),  # Style de la ligne
          hoverinfo = "x+text",
          hovertext = ~paste("Nombre de mutations :", format(Total, big.mark = " "))
        ) %>%
        
        layout(
          title = list(text = paste0("Évolution des mutations de ",
                                     min(EVO_MUT_react()$MILLESIME), 
                                     " à ", max(EVO_MUT_react()$MILLESIME), 
                                     "<br>pour les appartements et les maisons",
                                     "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                       font = list(size = 15, color = 'black', family = 'Arial Black', bold = TRUE)),
          showlegend = TRUE,
          margin = list(
            l = 50,  # marge gauche
            r = 50,  # marge droite
            b = 50,  # marge en bas
            t = 100  # marge en haut
          ),
          xaxis = list(title = ""),
          yaxis = list(title = "Nombre de mutations", tickformat = ".,0"),
          barmode = "stack",
          plot_bgcolor = "white",  # Couleur de fond du graphique
          paper_bgcolor = "white", # Couleur de fond du papier
          font = list(color = 'black'),
          legend = list(

            orientation = "h",   # Légende horizontale
            bgcolor = ("rgba(0, 0, 0, 0)"),
            x = 0.5,             # Centrer la légende
            xanchor = "center",  # Alignement centré
            y = -0.2             # Position au-dessus du graphique
          )
        ) %>%
        # Annotation pour la source
        add_annotations(
          text = "Source : DV3F<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références pour l'annotation
          x = 1, y = -0.3, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
      graphe0mar
    })
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    ##_____________ D.1.1.2   graphe1mar et graphe12mar,graphe13mar,graphe14mar  ___________####

    
##________________________________________________________________________________________________________________   
    TRANSAC_react <- reactive({
      req(input$epci)
      TRANSAC %>%
        filter(LIBEPCI == input$epci)
    })
    
    
    output$graphe1mar <- renderPlotly({
      graphe1mar <- plot_ly(TRANSAC_react(), x = ~as.factor(MILLESIME),
                             y = ~Maison, marker = list(color = "#8d2631"),
                            text =~Maison, 
                            textposition = "inside", 
                             type = 'bar',hoverinfo = "x+text",
                             hovertext = ~paste0("Nombre de mutations : ",format(Maison, big.mark = " "))
      ) %>%
        layout(title = list( text= paste0("Évolution des transactions de type \''Maison\''<br> de ", min(TRANSAC_react()$MILLESIME) ," à ", max(TRANSAC_react()$MILLESIME),
                                          "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                             font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
               showlegend = F,
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               xaxis = list(title = "Année"),
               yaxis = list(title = "Nombre de mutations", tickformat = ".,"),
               plot_bgcolor = "white",  # Couleur de fond du graphique
               paper_bgcolor = "white",  # Couleur de fond du papier
               font = list(color = 'black'),
               legend = list(
                 orientation = "h",   # Horizontal orientation
                 bgcolor = ("rgba(0, 0, 0, 0)"),
                 x = 0.5,             # Center the legend
                 xanchor = "center",  # Align the center
                 y = 1.12              # Position above the plot
                 
               )
               
        )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : DV3F<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.20, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
      
    })
##________________________________________________________________________________________________________________   
    
    
    
    
    
    
    
    
    
##________________________________________________________________________________________________________________   
    PRIX_MAI_react <- reactive({
      req(input$epci)
      PRIX_MAI %>%
        filter(LIBEPCI == input$epci)
    })
    
    
    output$graphe12mar <- renderPlotly({
      graphe12mar <- plot_ly(PRIX_MAI_react(), x = ~as.factor(MILLESIME),
                            y = ~PRIX, 
                            color = ~quant,
                            colors = colormar, 
                            type = 'scatter', 
                            mode = 'lines+markers', 
                            text = ~paste0(format(PRIX, big.mark = " ")," €"),
                            textposition = "top",
                            textfont = list(color = "black", size = 10.3, family = "Arial Black"),
                            line = list(shape = 'spline'),
                            hoverinfo = "x+text",
                            hovertext = ~paste("quartile :", quant, "<br>Prix(en euros) :", format(PRIX, big.mark = " "),"€")
      ) %>%
        layout(title = list( text= paste0("Évolution du prix des maisons<br> de ", min(PRIX_MAI_react()$MILLESIME) ," à ", max(PRIX_MAI_react()$MILLESIME),
                                          "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                             font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
               showlegend = TRUE,
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               xaxis = list(title = ""),
               yaxis = list(title = "Prix (en euros)", tickformat = ".,"),
               plot_bgcolor = "white",  # Couleur de fond du graphique
               paper_bgcolor = "white",  # Couleur de fond du papier
               font = list(color = 'black'),
               legend = list(
                 orientation = "h",   # Horizontal orientation
                 bgcolor = ("rgba(0, 0, 0, 0)"),
                 x = 0.5,             # Centrer la légende
                 xanchor = "center",  # Alignement centré
                 y = -0.2             # Position au-dessus du graphique
                 
               )
               
        )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : DV3F<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.30, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
     
      
    })
##________________________________________________________________________________________________________________   
    
    
    
    
    
    
##________________________________________________________________________________________________________________   
    PRIXMC_MAI_react <- reactive({
      req(input$epci)
      PRIXMC_MAI %>%
        filter(LIBEPCI == input$epci)
    })
 
    output$graphe13mar <- renderPlotly({
      graphe13mar <- plot_ly(PRIXMC_MAI_react(),
                             x = ~as.factor(MILLESIME),
                            y = ~PRIXMC,
                            color = ~quant,
                            colors = colormar, 
                            type = 'scatter',
                            mode = 'lines+markers',
                            line = list(shape = 'spline'),
                            text = ~paste0(format(PRIXMC, big.mark = " "), " €"),
                            textposition = "top",
                            textfont = list(color = "black", size = 10.3, family = "Arial Black"),
                            hoverinfo = "x+text",
                            hovertext = ~paste("quartile :", quant, "<br>Prix(en euros) :", format(PRIXMC, big.mark = " "), "€")
      ) %>%
        layout(title = list( text= paste0("Évolution du prix des maisons<br> de ", min(PRIXMC_MAI_react()$MILLESIME) ," à ", max(PRIXMC_MAI_react()$MILLESIME),
                                          "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                             font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
               showlegend = TRUE,
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               xaxis = list(title = ""),
               yaxis = list(title = "Prix (en euros)", tickformat = ".,"),
               plot_bgcolor = "white",  # Couleur de fond du graphique
               paper_bgcolor = "white",  # Couleur de fond du papier
               font = list(color = 'black'),
               legend = list(
                 orientation = "h",   # Horizontal orientation
                 bgcolor = ("rgba(0, 0, 0, 0)"),
                 x = 0.5,             # Centrer la légende
                 xanchor = "center",  # Alignement centré
                 y = -0.2             # Position au-dessus du graphique    
                 
               )
               
        )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : DV3F<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.30, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )

    })
##__________________________________________________________________________________________________________________   
    
    
    SF_MAI_react <- reactive({
      req(input$epci)
      SF_MAI %>%
        filter(LIBEPCI == input$epci)
    })
    
    output$graphe14mar <- renderPlotly({
      graphe14mar <- plot_ly(SF_MAI_react(),
                             x = ~as.factor(MILLESIME),
                             y = ~SURFACE,
                             color = ~quant,
                             colors = colormar, 
                             type = 'scatter',
                             mode = 'lines+markers',
                             line = list(shape = 'spline'),
                             text = ~paste0(format(SURFACE, big.mark = " ")," m²"),
                             textposition = "top",
                             textfont = list(color = "black", size = 10.3, family = "Arial Black"),
                             hoverinfo = "x+text",
                             hovertext = ~paste("quartile :", quant, "<br>Surface :", format(SURFACE, big.mark = " "), "m²")
      ) %>%
        layout(title = list( text= paste0("Évolution de la surface des maisons<br> de ", min(SF_MAI_react()$MILLESIME) ," à ", max(SF_MAI_react()$MILLESIME),
                                          "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                             font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
               showlegend = TRUE,
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               xaxis = list(title = ""),
               yaxis = list(title = "Surface (en mètre carré)", tickformat = ".,"),
               plot_bgcolor = "white",  # Couleur de fond du graphique
               paper_bgcolor = "white",  # Couleur de fond du papier
               font = list(color = 'black'),
               legend = list(
                 orientation = "h",   # Horizontal orientation
                 bgcolor = ("rgba(0, 0, 0, 0)"),
                 x = 0.5,             # Centrer la légende
                 xanchor = "center",  # Alignement centré
                 y = -0.2             # Position au-dessus du graphique
                 
               )
               
        )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : DV3F<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.30, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
    })
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    ##           ICII !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    
    
    
    
    ##_____________ D.1.1.3   graphe2mar et graphe22mar,graphe23mar,graphe24mar  ___________####
    
    
    ##________________________________________________________________________________________________________________   
    TRANSAC_react <- reactive({
      req(input$epci)
      TRANSAC %>%
        filter(LIBEPCI == input$epci)
    })
    
    
    output$graphe2mar <- renderPlotly({
      graphe2mar <- plot_ly(TRANSAC_react(), x = ~as.factor(MILLESIME),
                            y = ~Appartement, marker = list(color = "#324b4c"), text =~Appartement, textposition = "inside", 
                            type = 'bar',hoverinfo = "x+text",
                            hovertext = ~paste0("Nombre de mutations : ",format(Appartement, big.mark = " "))
      ) %>%
        layout(title = list( text= paste0("Évolution des transactions de type \''Appartement\''<br> de ", min(TRANSAC_react()$MILLESIME) ," à ", max(TRANSAC_react()$MILLESIME),
                                         "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                             font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
               showlegend = F,
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               xaxis = list(title = "Année"),
               yaxis = list(title = "Nombre de mutations", tickformat = ".,"),
               plot_bgcolor = "white",  # Couleur de fond du graphique
               paper_bgcolor = "white",  # Couleur de fond du papier
               font = list(color = 'black'),
               legend = list(
                 orientation = "h",   # Horizontal orientation
                 bgcolor = ("rgba(0, 0, 0, 0)"),
                 x = 0.5,             # Center the legend
                 xanchor = "center",  # Align the center
                 y = 1.12              # Position above the plot
                 
               )
               
        )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : DV3F<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.20, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
      
    })
    ##________________________________________________________________________________________________________________   
    
    
    
    
    
    
    
    
    
    ##________________________________________________________________________________________________________________   
    PRIX_APP_react <- reactive({
      req(input$epci)
      PRIX_APP %>%
        filter(LIBEPCI == input$epci)
    })
    
    
    output$graphe22mar <- renderPlotly({
      graphe22mar <- plot_ly(PRIX_APP_react(), 
                             x = ~as.factor(MILLESIME),
                             y = ~PRIX,
                             color = ~quant,
                             colors = colormar, 
                             type = 'scatter',
                             mode = 'lines+markers', 
                             line = list(shape = 'spline'),
                             text = ~paste0(format(PRIX, big.mark = " "), " €"),
                             textposition = "top",
                             textfont = list(color = "black", size = 10.3, family = "Arial Black"),
                             hoverinfo = "x+text",
                             hovertext = ~paste("quartile :", quant, "<br>Prix(en euros) :", format(PRIX, big.mark = " "),"€")
      ) %>%
        layout(title = list( text= paste0("Évolution du prix des appartements<br> de ", min(PRIX_APP_react()$MILLESIME) ," à ", max(PRIX_APP_react()$MILLESIME),
                                          "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                             font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
               showlegend = TRUE,
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               xaxis = list(title = ""),
               yaxis = list(title = "Prix (en euros)", tickformat = ".,"),
               plot_bgcolor = "white",  # Couleur de fond du graphique
               paper_bgcolor = "white",  # Couleur de fond du papier
               font = list(color = 'black'),
               legend = list(
                 orientation = "h",   # Horizontal orientation
                 bgcolor = ("rgba(0, 0, 0, 0)"),
                 x = 0.5,             # Center the legend
                 xanchor = "center",  # Align the center
                 y = -0.2              # Position above the plot
                 
               )
               
        )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : DV3F<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.30, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
      
    })
    ##________________________________________________________________________________________________________________   
    
    
    
    
    
    
    ##________________________________________________________________________________________________________________   
    PRIXMC_APP_react <- reactive({
      req(input$epci)
      PRIXMC_APP %>%
        filter(LIBEPCI == input$epci)
    })
    
    output$graphe23mar <- renderPlotly({
      graphe23mar <- plot_ly(PRIXMC_APP_react(),
                             x = ~as.factor(MILLESIME),
                             y = ~PRIXMC,
                             color = ~quant,
                             colors = colormar, 
                             type = 'scatter', 
                             mode = 'lines+markers',
                             line = list(shape = 'spline'),
                             text = ~paste0(format(PRIXMC, big.mark = " "), " €"),
                             textposition = "top",
                             textfont = list(color = "black", size = 10.3, family = "Arial Black"),
                             hoverinfo = "x+text",
                             hovertext = ~paste("quartile :", quant, "<br>Prix(en euros) :", format(PRIXMC, big.mark = " "), "€")
      ) %>%
        layout(title = list( text= paste0("Évolution du prix des appartements<br> de ", min(PRIXMC_APP_react()$MILLESIME) ," à ", max(PRIXMC_APP_react()$MILLESIME),
                                          "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                             font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
               showlegend = TRUE,
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               xaxis = list(title = ""),
               yaxis = list(title = "Prix (en euros)", tickformat = ".,"),
               plot_bgcolor = "white",  # Couleur de fond du graphique
               paper_bgcolor = "white",  # Couleur de fond du papier
               font = list(color = 'black'),
               legend = list(
                 orientation = "h",   # Horizontal orientation
                 bgcolor = ("rgba(0, 0, 0, 0)"),
                 x = 0.5,             # Center the legend
                 xanchor = "center",  # Align the center
                 y = -0.2              # Position above the plot
                 
               )
               
        )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : DV3F<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.30, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
    })
    ##__________________________________________________________________________________________________________________   
    
    
    SF_APP_react <- reactive({
      req(input$epci)
      SF_APP %>%
        filter(LIBEPCI == input$epci)
    })
    
    output$graphe24mar <- renderPlotly({
      graphe24mar <- plot_ly(SF_APP_react(),
                             x = ~as.factor(MILLESIME),
                             y = ~SURFACE, 
                             color = ~quant,
                             colors = colormar, 
                             type = 'scatter',
                             mode = 'lines+markers',
                             line = list(shape = 'spline'),
                             text = ~paste0(format(SURFACE, big.mark = " "), " m²"),
                             textposition = "top",
                             textfont = list(color = "black", size = 10.3, family = "Arial Black"),
                             hoverinfo = "x+text",
                             hovertext = ~paste("quartile :", quant, "<br>Surface :", format(SURFACE, big.mark = " "), "m²")
      ) %>%
        layout(title = list( text= paste0("Évolution de la surface des appartements<br> de ", min(SF_APP_react()$MILLESIME) ," à ", max(SF_APP_react()$MILLESIME),
                                          "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                             font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
               showlegend = TRUE,
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               xaxis = list(title = ""),
               yaxis = list(title = "Surface (en mètre carré)", tickformat = ".,"),
               plot_bgcolor = "white",  # Couleur de fond du graphique
               paper_bgcolor = "white",  # Couleur de fond du papier
               font = list(color = 'black'),
               legend = list(
                 orientation = "h",   # Horizontal orientation
                 bgcolor = ("rgba(0, 0, 0, 0)"),
                 x = 0.5,             # Center the legend
                 xanchor = "center",  # Align the center
                 y = -0.2              # Position above the plot
                 
               )
               
        )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : DV3F<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.30, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
    })
    
    
    
    
    
    
    
    
    
    
    
    
    ####________ D.1.2 CARACTERISTIQUES DES MUTATIONS_________________####
    
    ##_____________ D.1.2.1   graphe3mar mutations maisons par taille et periode de construction des biens  ___________####
    
    MAI_TAILLE_PCONS_react <- reactive({
      req(input$epci)
      MAI_TAILLE_PCONS %>%
        filter(LIBEPCI == input$epci)%>%
        mutate(t_epoque = paste0(t_epoque, " "),
          t_epoque = factor(t_epoque, levels = c("Avant 1945 ","1945-1960 " , "1961-1974 ",  "1975-2012 " ,"Après 2013 "), ordered = T),
               )
    })
    
    
    
    output$graphe3mar <- renderPlotly({
      
      data_percent <- MAI_TAILLE_PCONS_react() %>%
        group_by(t_epoque) %>%  
        mutate(percent = (MUT / sum(MUT)) * 100) 
      
      
      
      
      graphe3mar <- plot_ly() %>%
        add_bars(
          data = MAI_TAILLE_PCONS_react(),
          orientation = "h",
          x=~MUT,
          y~t_epoque,
          text =~paste0(round(data_percent$percent, 0),"%"),
          textposition = "top",
          textfont = list(color = "black"),
          hoverinfo = "y+text",
          hovertext = paste0("Taille du bien : ", MAI_TAILLE_PCONS_react()$Taille, "<br>Nombre de mutations : ", format(MAI_TAILLE_PCONS_react()$MUT, big.mark = " ")),
          color =~Taille,
          colors= "Reds",
          textposition = "auto", outsidetextfont = "black"

          
        )%>%
        layout(title = list( text= paste0("Répartition des mutations de type \''Maison\'' en " , max(MAI_TAILLE_PCONS_react()$MILLESIME), "<br>selon la taille et la periode de construction",
                                          "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                             font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
               showlegend = TRUE,
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               barmode = "stack",
               xaxis = list(title = " ", tickformat = ",.0%",
                            tickvals = c(0,50,100),
                            ticktext = c(" "," "," ")),
               yaxis = list(title = "Période de construction", tickformat = ".,"),
               plot_bgcolor = "white",  # Couleur de fond du graphique
               paper_bgcolor = "white",  # Couleur de fond du papier
               font = list(color = 'black'),
               legend = list(
                 traceorder = "normal",
                 orientation = "h",   # Horizontal orientation
                 bgcolor = ("rgba(0, 0, 0, 0)"),
                 x = 0.5,             # Center the legend
                 xanchor = "center",  # Align the center
                 y = -0.2              # Position above the plot
                 
               )
               
        )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : DV3F<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.3, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )%>%
        
        add_annotations(
          text = "Petite taille : moins de 90m²
              Moyenne taille : entre 90 et 130m²
          Grande taille : plus de 130m²",
          xref = 'paper', yref = 'paper',  # Références pour l'annotation
          x = -0.15, y = -0.3159, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
      
      
      graphe3mar
      
      
      
      
      
    })
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    ##_____________ D.1.2.2   graphe4mar mutations Appartements par taille et periode de construction des biens  ___________####
    
    
    
    APP_TAILLE_PCONS_react <- reactive({
      req(input$epci)
      APP_TAILLE_PCONS %>%
        filter(LIBEPCI == input$epci)%>%
        mutate(t_epoque = paste0(t_epoque, " "),
               t_epoque = factor(t_epoque, levels = c("Avant 1945 ","1945-1960 " , "1961-1974 ",  "1975-2012 " ,"Après 2013 "), ordered = T),
        )
    })
    
    
    
    output$graphe4mar <- renderPlotly({
      
      
      data_percent <- APP_TAILLE_PCONS_react() %>%
        group_by(t_epoque) %>%  
        mutate(percent = (MUT / sum(MUT)) * 100) 
      
      
      
      
      graphe4mar <- plot_ly() %>%
        add_bars(
          data = APP_TAILLE_PCONS_react(),
          orientation = "h",
          x=~MUT,
          y~t_epoque,
          text =~paste0(round(data_percent$percent, 0),"%"),
          textposition = "top",
          textfont = list(color = "black"),
          hoverinfo = "y+text",
          hovertext = paste0("Taille du bien : ", APP_TAILLE_PCONS_react()$Taille, "<br>Nombre de mutations : ", format(APP_TAILLE_PCONS_react()$MUT, big.mark = " ")),
          color =~Taille,
          colors= "Greens",
          textposition = "auto"
          
        )%>%
        layout(title = list( text= paste0("Répartition des mutations de type \''Appartement\'' en " , max(APP_TAILLE_PCONS_react()$MILLESIME), "<br>selon la taille et la periode de construction",
                                          "<br><span style='font-size:12px; font-weight:normal;'>Territoire : ",input$epci, "</span>"),
                             font = list(size = 15, color = 'black', family = 'Arial Black',bold = TRUE)),
               showlegend = TRUE,
               margin = list(
                 l = 50,  # marge gauche
                 r = 50,  # marge droite
                 b = 50,  # marge en bas
                 t = 100  # marge en haut
               ),
               barmode = "stack",
               xaxis = list(title = " ", tickformat = ",.0%",
                            tickvals = c(0,50,100),
                            ticktext = c(" "," "," ")),
               yaxis = list(title = "Période de construction", tickformat = ".,"),
               plot_bgcolor = "white",  # Couleur de fond du graphique
               paper_bgcolor = "white",  # Couleur de fond du papier
               font = list(color = 'black'),
               legend = list(
                 traceorder = "normal",
                 orientation = "h",   # Horizontal orientation
                 bgcolor = ("rgba(0, 0, 0, 0)"),
                 x = 0.5,             # Center the legend
                 xanchor = "center",  # Align the center
                 y = -0.2              # Position above the plot
                 
               )
               
        )%>%
        # Ajout de l'annotation pour la source en bas à droite
        add_annotations(
          text = "Source : DV3F<br>Traitement : ADIL30",
          xref = 'paper', yref = 'paper',  # Références au papier pour positionner l'annotation
          x = 1, y = -0.30, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )%>%
        
        add_annotations(
          text = "Petite taille : T1-T2
                   Moyenne taille : T3-T4
                    Grande taille : T5+",
          xref = 'paper', yref = 'paper',  # Références pour l'annotation
          x = -0.15, y = -0.3159, showarrow = FALSE,  # Placement en bas à droite
          font = list(size = 9, color = 'gray')
        )
      
      
      
      graphe4mar
      
      
      
      
      
    })
    
    
    
    
    
    
    
    
       
}



